{
  "components": {
    "schemas": {
      "BadRequestDTO": {
        "properties": {
          "message": {
            "example": "Bad Request",
            "type": "string"
          },
          "statusCode": {
            "example": 400,
            "type": "number"
          }
        },
        "type": "object"
      },
      "BulkUpdateDto": {
        "properties": {
          "altId": {
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "altType": {
            "enum": ["location"],
            "type": "string"
          },
          "availability": {
            "description": "New availability status",
            "type": "boolean"
          },
          "collectionIds": {
            "description": "Array of collection IDs",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "compareAtPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceUpdateField"
              }
            ],
            "description": "Compare at price update configuration"
          },
          "currency": {
            "description": "Currency code",
            "example": "USD",
            "type": "string"
          },
          "filters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BulkUpdateFilters"
              }
            ],
            "description": "Filters to apply when selectAll is true"
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceUpdateField"
              }
            ],
            "description": "Price update configuration"
          },
          "productIds": {
            "description": "Array of product IDs",
            "example": ["5f8d0d55b54764421b7156c1"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "Type of bulk update operation",
            "enum": [
              "bulk-update-price",
              "bulk-update-availability",
              "bulk-update-product-collection",
              "bulk-delete-products",
              "bulk-update-currency"
            ],
            "example": "bulk-update-price",
            "type": "string"
          }
        },
        "required": ["altId", "altType", "type", "productIds"],
        "type": "object"
      },
      "BulkUpdateFilters": {
        "properties": {
          "availableInStore": {
            "description": "Filter by availability status",
            "example": true,
            "type": "boolean"
          },
          "collectionIds": {
            "description": "Filter by collection IDs",
            "example": ["5f8d0d55b54764421b7156c1", "5f8d0d55b54764421b7156c2"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "productType": {
            "description": "Filter by product type",
            "example": "one-time",
            "type": "string"
          },
          "search": {
            "description": "Filter by search term",
            "example": "blue t-shirt",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkUpdateResponseDto": {
        "properties": {
          "message": {
            "description": "Success message",
            "example": "Successfully created",
            "type": "string"
          },
          "status": {
            "description": "Status of api action",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "CollectionSEODto": {
        "properties": {
          "description": {
            "description": "The description which would be displayed in preview purposes",
            "example": "Collections where all the best products are available",
            "type": "string"
          },
          "title": {
            "description": "The title which will be displayed as an SEO format",
            "example": "Best Sellers",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CollectionSchema": {
        "properties": {
          "_id": {
            "description": "The unique identifier for the collection",
            "example": "655b33a82209e60b6adb87a5",
            "type": "string"
          },
          "altId": {
            "description": "Location Id to which the collection is associated",
            "example": "Z4Bxl8J4SaPEPLq9IQ8g",
            "type": "string"
          },
          "createdAt": {
            "description": "Date at which the collection was created",
            "example": "2024-02-22T09:27:19.728Z",
            "type": "string"
          },
          "image": {
            "description": "The URL of the image that is going to be displayed as the collection Thumbnail",
            "example": "http://example.com/watermark.png",
            "type": "string"
          },
          "name": {
            "description": "Name of the collection",
            "example": "Best Sellers",
            "type": "string"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionSEODto"
              }
            ],
            "description": "The information which will be displayed in SEO previews"
          },
          "slug": {
            "description": "Slug of the collection with which navigation is established. Special Characters and spacing is not allowed and should be unique",
            "example": "best-sellers",
            "type": "string"
          }
        },
        "required": ["_id", "altId", "name", "slug", "image", "seo", "createdAt"],
        "type": "object"
      },
      "CountReviewsByStatusResponseDto": {
        "properties": {
          "data": {
            "description": "Array of review status counts",
            "items": {
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "CreateCollectionResponseDto": {
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionSchema"
              }
            ],
            "description": "created Collection"
          }
        },
        "required": ["data"],
        "type": "object"
      },
      "CreatePriceDto": {
        "properties": {
          "allowOutOfStockPurchases": {
            "description": "Continue selling when out of stock",
            "example": true,
            "type": "boolean"
          },
          "amount": {
            "description": "The amount of the price. ( min: 0 )",
            "example": 99.99,
            "type": "number"
          },
          "availableQuantity": {
            "description": "Available inventory stock quantity",
            "example": 5,
            "type": "number"
          },
          "compareAtPrice": {
            "description": "The compare at price for the price.",
            "example": 19.99,
            "type": "number"
          },
          "currency": {
            "description": "The currency of the price.",
            "example": "USD",
            "type": "string"
          },
          "description": {
            "description": "A brief description of the price.",
            "type": "string"
          },
          "digitalDelivery": {
            "description": "Digital delivery options",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isDigitalProduct": {
            "description": "Is the product a digital product",
            "example": true,
            "type": "boolean"
          },
          "locationId": {
            "description": "The unique identifier of the location associated with the price.",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "membershipOffers": {
            "description": "An array of membership offers associated with the price.",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "type": "array"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceMetaDto"
              }
            ],
            "description": "Additional metadata associated with the price."
          },
          "name": {
            "description": "The name of the price.",
            "example": "Price Name",
            "type": "string"
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "setupFee": {
            "description": "The setup fee for the price.",
            "example": 10.99,
            "type": "number"
          },
          "shippingOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingOptionsDto"
              }
            ],
            "description": "Shipping options of the Price"
          },
          "sku": {
            "description": "The unique identifier of the SKU associated with the price",
            "example": "sku_123",
            "type": "string"
          },
          "totalCycles": {
            "description": "The total number of billing cycles for the price. ( min: 1 )",
            "example": 12,
            "type": "number"
          },
          "trackInventory": {
            "description": "Need to track inventory stock quantity",
            "example": true,
            "type": "boolean"
          },
          "trialPeriod": {
            "description": "The trial period duration in days (if applicable).",
            "example": 7,
            "type": "number"
          },
          "type": {
            "description": "The type of the price.",
            "enum": ["one_time", "recurring"],
            "example": "one_time",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier of the user who created the price.",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "variantOptionIds": {
            "description": "An array of variant option IDs associated with the price.",
            "example": ["option_id_1", "option_id_2"],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["name", "type", "currency", "amount", "locationId"],
        "type": "object"
      },
      "CreatePriceResponseDto": {
        "properties": {
          "_id": {
            "description": "The unique identifier for the price.",
            "example": "655b33aa2209e60b6adb87a7",
            "type": "string"
          },
          "allowOutOfStockPurchases": {
            "description": "Continue selling when out of stock",
            "example": true,
            "type": "boolean"
          },
          "amount": {
            "description": "The amount of the price.",
            "example": 199999,
            "type": "number"
          },
          "availableQuantity": {
            "description": "Available inventory stock quantity",
            "example": 5,
            "type": "number"
          },
          "compareAtPrice": {
            "description": "The compare-at price for comparison purposes.",
            "example": 2000000,
            "type": "number"
          },
          "createdAt": {
            "description": "The creation timestamp of the price.",
            "example": "2023-11-20T10:23:38.645Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The currency code for the price.",
            "example": "INR",
            "type": "string"
          },
          "locationId": {
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6",
            "type": "string"
          },
          "membershipOffers": {
            "description": "An array of membership offers associated with the price.",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the price.",
            "example": "Red / S",
            "type": "string"
          },
          "product": {
            "description": "The unique identifier for the associated product.",
            "example": "655b33a82209e60b6adb87a5",
            "type": "string"
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "trackInventory": {
            "description": "Indicates whether inventory tracking is enabled.",
            "example": null,
            "type": "boolean"
          },
          "type": {
            "description": "The type of the price (e.g., one_time).",
            "enum": ["one_time", "recurring"],
            "example": "one_time",
            "type": "string"
          },
          "updatedAt": {
            "description": "The last update timestamp of the price.",
            "example": "2024-01-23T09:57:04.852Z",
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier for the user.",
            "example": "6YAtzfzpmHAdj0e8GkKp",
            "type": "string"
          },
          "variantOptionIds": {
            "description": "An array of variant option IDs associated with the price.",
            "example": ["h4z7u0im2q8", "h3nst2ltsnn"],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["_id", "name", "type", "currency", "amount"],
        "type": "object"
      },
      "CreateProductCollectionsDto": {
        "properties": {
          "altId": {
            "description": "Location Id",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "altType": {
            "description": "The type of alt. For now it is only LOCATION",
            "enum": ["location"],
            "example": "LOCATION",
            "type": "string"
          },
          "collectionId": {
            "description": "Unique Identifier of the Product Collection, Mongo Id",
            "example": "66057f9d28536eae584ec047",
            "type": "string"
          },
          "image": {
            "description": "The URL of the image that is going to be displayed as the collection Thumbnail",
            "example": "http://example.com/watermark.png",
            "type": "string"
          },
          "name": {
            "description": "Name of the Product Collection",
            "example": "Best Sellers",
            "type": "string"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionSEODto"
              }
            ],
            "description": "The metadata information which will be displayed in SEO previews"
          },
          "slug": {
            "description": "Slug of the Product Collection which helps in navigation",
            "example": "best-sellers",
            "type": "string"
          }
        },
        "required": ["altId", "altType", "name", "slug"],
        "type": "object"
      },
      "CreateProductDto": {
        "properties": {
          "automaticTaxCategoryId": {
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5",
            "type": "string"
          },
          "availableInStore": {
            "description": "Indicates whether the product is available in-store.",
            "example": true,
            "type": "boolean"
          },
          "collectionIds": {
            "description": "An array of category Ids for the product",
            "example": ["65d71377c326ea78e1c47df5", "65d71377c326ea78e1c47d34"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "A brief description of the product.",
            "example": "Product description goes here.",
            "type": "string"
          },
          "image": {
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png",
            "type": "string"
          },
          "isLabelEnabled": {
            "default": false,
            "description": "Is the product label enabled. If this is true, label object cannot be empty.",
            "example": true,
            "type": "boolean"
          },
          "isTaxesEnabled": {
            "default": false,
            "description": "Are there any taxes attached to the product. If this is true, taxes array cannot be empty.",
            "example": true,
            "type": "boolean"
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "Details for Product Label"
          },
          "locationId": {
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6",
            "type": "string"
          },
          "medias": {
            "description": "An array of medias for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductMediaDto"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the product.",
            "example": "Awesome Product",
            "type": "string"
          },
          "productType": {
            "enum": ["DIGITAL", "PHYSICAL", "SERVICE", "PHYSICAL/DIGITAL"],
            "type": "string"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSEODto"
              }
            ],
            "description": "SEO data for the product that will be displayed in the preview"
          },
          "slug": {
            "description": "The slug using which the product navigation will be handled",
            "example": "awesome-product",
            "type": "string"
          },
          "statementDescriptor": {
            "description": "The statement descriptor for the product.",
            "example": "abcde",
            "type": "string"
          },
          "taxes": {
            "description": "List of ids of Taxes attached to the Product. If taxes are passed, isTaxesEnabled should be true.",
            "example": ["654492a4e6bef380114de15a"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "variants": {
            "description": "An array of variants for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "type": "array"
          }
        },
        "required": ["name", "locationId", "productType"],
        "type": "object"
      },
      "CreateProductResponseDto": {
        "properties": {
          "_id": {
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5",
            "type": "string"
          },
          "automaticTaxCategoryId": {
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5",
            "type": "string"
          },
          "availableInStore": {
            "description": "Indicates whether the product is available in-store.",
            "example": true,
            "type": "boolean"
          },
          "collectionIds": {
            "description": "An array of category Ids for the product",
            "example": ["65d71377c326ea78e1c47df5", "65d71377c326ea78e1c47d34"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createdAt": {
            "description": "The creation timestamp of the product.",
            "example": "2023-11-20T10:23:36.515Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "product description",
            "example": "This is a really awesome product",
            "type": "string"
          },
          "image": {
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png",
            "type": "string"
          },
          "isLabelEnabled": {
            "default": false,
            "description": "A boolean representing whether a product label is enabled or not",
            "example": true,
            "type": "boolean"
          },
          "isTaxesEnabled": {
            "default": false,
            "description": "The field indicates whether taxes are enabled for the product or not.",
            "example": true,
            "type": "boolean"
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "The Product label details"
          },
          "locationId": {
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6",
            "type": "string"
          },
          "medias": {
            "description": "An array of medias for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductMediaDto"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the product.",
            "example": "Awesome Product",
            "type": "string"
          },
          "productType": {
            "description": "The type of the product (e.g., PHYSICAL).",
            "example": "PHYSICAL",
            "type": "string"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSEODto"
              }
            ],
            "description": "The SEO information for the product requested"
          },
          "slug": {
            "description": "The slug of the product by which the product will be navigated",
            "example": "washing-machine",
            "type": "string"
          },
          "statementDescriptor": {
            "description": "The statement descriptor for the product.",
            "example": "abcde",
            "type": "string"
          },
          "taxes": {
            "description": "An array of ids of Taxes attached to the Product. If the expand query includes tax, the taxes will be of type `ProductTaxDto`. Please refer to the `ProductTaxDto` for additional details.",
            "example": ["654492a4e6bef380114de15a"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updatedAt": {
            "description": "The last update timestamp of the product.",
            "example": "2024-01-23T09:57:04.846Z",
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier for the user who created the product.",
            "example": "6YAtzfzpmHAdj0e8GkKp",
            "type": "string"
          },
          "variants": {
            "description": "An array of variants for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "type": "array"
          }
        },
        "required": ["_id", "locationId", "name", "productType", "createdAt", "updatedAt"],
        "type": "object"
      },
      "DefaultCollectionResponseDto": {
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductCategories"
              }
            ],
            "description": "Collection Data"
          },
          "status": {
            "description": "Status of the operation",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["data", "status"],
        "type": "object"
      },
      "DefaultPriceResponseDto": {
        "properties": {
          "_id": {
            "description": "The unique identifier for the price.",
            "example": "655b33aa2209e60b6adb87a7",
            "type": "string"
          },
          "allowOutOfStockPurchases": {
            "description": "Continue selling when out of stock",
            "example": true,
            "type": "boolean"
          },
          "amount": {
            "description": "The amount of the price.",
            "example": 199999,
            "type": "number"
          },
          "availableQuantity": {
            "description": "Available inventory stock quantity",
            "example": 5,
            "type": "number"
          },
          "compareAtPrice": {
            "description": "The compare-at price for comparison purposes.",
            "example": 2000000,
            "type": "number"
          },
          "createdAt": {
            "description": "The creation timestamp of the price.",
            "example": "2023-11-20T10:23:38.645Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The currency code for the price.",
            "example": "INR",
            "type": "string"
          },
          "locationId": {
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6",
            "type": "string"
          },
          "membershipOffers": {
            "description": "An array of membership offers associated with the price.",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the price.",
            "example": "Red / S",
            "type": "string"
          },
          "product": {
            "description": "The unique identifier for the associated product.",
            "example": "655b33a82209e60b6adb87a5",
            "type": "string"
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "trackInventory": {
            "description": "Indicates whether inventory tracking is enabled.",
            "example": null,
            "type": "boolean"
          },
          "type": {
            "description": "The type of the price (e.g., one_time).",
            "enum": ["one_time", "recurring"],
            "example": "one_time",
            "type": "string"
          },
          "updatedAt": {
            "description": "The last update timestamp of the price.",
            "example": "2024-01-23T09:57:04.852Z",
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier for the user.",
            "example": "6YAtzfzpmHAdj0e8GkKp",
            "type": "string"
          },
          "variantOptionIds": {
            "description": "An array of variant option IDs associated with the price.",
            "example": ["h4z7u0im2q8", "h3nst2ltsnn"],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["_id", "name", "type", "currency", "amount"],
        "type": "object"
      },
      "DefaultProductResponseDto": {
        "properties": {
          "_id": {
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5",
            "type": "string"
          },
          "automaticTaxCategoryId": {
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5",
            "type": "string"
          },
          "availableInStore": {
            "description": "Indicates whether the product is available in-store.",
            "example": true,
            "type": "boolean"
          },
          "collectionIds": {
            "description": "An array of category Ids for the product",
            "example": ["65d71377c326ea78e1c47df5", "65d71377c326ea78e1c47d34"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createdAt": {
            "description": "The creation timestamp of the product.",
            "example": "2023-11-20T10:23:36.515Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "product description",
            "example": "This is a really awesome product",
            "type": "string"
          },
          "image": {
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png",
            "type": "string"
          },
          "isLabelEnabled": {
            "default": false,
            "description": "A boolean representing whether a product label is enabled or not",
            "example": true,
            "type": "boolean"
          },
          "isTaxesEnabled": {
            "default": false,
            "description": "The field indicates whether taxes are enabled for the product or not.",
            "example": true,
            "type": "boolean"
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "The Product label details"
          },
          "locationId": {
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6",
            "type": "string"
          },
          "medias": {
            "description": "An array of medias for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductMediaDto"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the product.",
            "example": "Awesome Product",
            "type": "string"
          },
          "productType": {
            "description": "The type of the product (e.g., PHYSICAL).",
            "example": "PHYSICAL",
            "type": "string"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSEODto"
              }
            ],
            "description": "The SEO information for the product requested"
          },
          "slug": {
            "description": "The slug of the product by which the product will be navigated",
            "example": "washing-machine",
            "type": "string"
          },
          "statementDescriptor": {
            "description": "The statement descriptor for the product.",
            "example": "abcde",
            "type": "string"
          },
          "taxes": {
            "description": "An array of ids of Taxes attached to the Product. If the expand query includes tax, the taxes will be of type `ProductTaxDto`. Please refer to the `ProductTaxDto` for additional details.",
            "example": ["654492a4e6bef380114de15a"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updatedAt": {
            "description": "The last update timestamp of the product.",
            "example": "2024-01-23T09:57:04.846Z",
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier for the user who created the product.",
            "example": "6YAtzfzpmHAdj0e8GkKp",
            "type": "string"
          },
          "variants": {
            "description": "An array of variants for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "type": "array"
          }
        },
        "required": ["_id", "locationId", "name", "productType", "createdAt", "updatedAt"],
        "type": "object"
      },
      "DeletePriceResponseDto": {
        "properties": {
          "status": {
            "description": "returns true if the price is successfully deleted",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "DeleteProductCollectionResponseDto": {
        "properties": {
          "message": {
            "description": "Success message",
            "example": "Successfully created",
            "type": "string"
          },
          "status": {
            "description": "Status of api action",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "DeleteProductResponseDto": {
        "properties": {
          "status": {
            "description": "returns true if the product is successfully deleted",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "DeleteProductReviewResponseDto": {
        "properties": {
          "message": {
            "description": "Success message",
            "example": "Successfully created",
            "type": "string"
          },
          "status": {
            "description": "Status of api action",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "GetInventoryResponseDto": {
        "properties": {
          "inventory": {
            "description": "List of inventory items",
            "items": {
              "$ref": "#/components/schemas/InventoryItemDto"
            },
            "type": "array"
          },
          "total": {
            "description": "Total count of inventory items",
            "example": {
              "total": 100
            },
            "type": "object"
          }
        },
        "required": ["inventory", "total"],
        "type": "object"
      },
      "GetPriceResponseDto": {
        "properties": {
          "_id": {
            "description": "The unique identifier for the price.",
            "example": "655b33aa2209e60b6adb87a7",
            "type": "string"
          },
          "allowOutOfStockPurchases": {
            "description": "Continue selling when out of stock",
            "example": true,
            "type": "boolean"
          },
          "amount": {
            "description": "The amount of the price.",
            "example": 199999,
            "type": "number"
          },
          "availableQuantity": {
            "description": "Available inventory stock quantity",
            "example": 5,
            "type": "number"
          },
          "compareAtPrice": {
            "description": "The compare-at price for comparison purposes.",
            "example": 2000000,
            "type": "number"
          },
          "createdAt": {
            "description": "The creation timestamp of the price.",
            "example": "2023-11-20T10:23:38.645Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The currency code for the price.",
            "example": "INR",
            "type": "string"
          },
          "locationId": {
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6",
            "type": "string"
          },
          "membershipOffers": {
            "description": "An array of membership offers associated with the price.",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the price.",
            "example": "Red / S",
            "type": "string"
          },
          "product": {
            "description": "The unique identifier for the associated product.",
            "example": "655b33a82209e60b6adb87a5",
            "type": "string"
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "trackInventory": {
            "description": "Indicates whether inventory tracking is enabled.",
            "example": null,
            "type": "boolean"
          },
          "type": {
            "description": "The type of the price (e.g., one_time).",
            "enum": ["one_time", "recurring"],
            "example": "one_time",
            "type": "string"
          },
          "updatedAt": {
            "description": "The last update timestamp of the price.",
            "example": "2024-01-23T09:57:04.852Z",
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier for the user.",
            "example": "6YAtzfzpmHAdj0e8GkKp",
            "type": "string"
          },
          "variantOptionIds": {
            "description": "An array of variant option IDs associated with the price.",
            "example": ["h4z7u0im2q8", "h3nst2ltsnn"],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["_id", "name", "type", "currency", "amount"],
        "type": "object"
      },
      "GetProductResponseDto": {
        "properties": {
          "_id": {
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5",
            "type": "string"
          },
          "automaticTaxCategoryId": {
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5",
            "type": "string"
          },
          "availableInStore": {
            "description": "Indicates whether the product is available in-store.",
            "example": true,
            "type": "boolean"
          },
          "collectionIds": {
            "description": "An array of category Ids for the product",
            "example": ["65d71377c326ea78e1c47df5", "65d71377c326ea78e1c47d34"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createdAt": {
            "description": "The creation timestamp of the product.",
            "example": "2023-11-20T10:23:36.515Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "product description",
            "example": "This is a really awesome product",
            "type": "string"
          },
          "image": {
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png",
            "type": "string"
          },
          "isLabelEnabled": {
            "default": false,
            "description": "A boolean representing whether a product label is enabled or not",
            "example": true,
            "type": "boolean"
          },
          "isTaxesEnabled": {
            "default": false,
            "description": "The field indicates whether taxes are enabled for the product or not.",
            "example": true,
            "type": "boolean"
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "The Product label details"
          },
          "locationId": {
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6",
            "type": "string"
          },
          "medias": {
            "description": "An array of medias for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductMediaDto"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the product.",
            "example": "Awesome Product",
            "type": "string"
          },
          "productType": {
            "description": "The type of the product (e.g., PHYSICAL).",
            "example": "PHYSICAL",
            "type": "string"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSEODto"
              }
            ],
            "description": "The SEO information for the product requested"
          },
          "slug": {
            "description": "The slug of the product by which the product will be navigated",
            "example": "washing-machine",
            "type": "string"
          },
          "statementDescriptor": {
            "description": "The statement descriptor for the product.",
            "example": "abcde",
            "type": "string"
          },
          "taxes": {
            "description": "An array of ids of Taxes attached to the Product. If the expand query includes tax, the taxes will be of type `ProductTaxDto`. Please refer to the `ProductTaxDto` for additional details.",
            "example": ["654492a4e6bef380114de15a"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updatedAt": {
            "description": "The last update timestamp of the product.",
            "example": "2024-01-23T09:57:04.846Z",
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier for the user who created the product.",
            "example": "6YAtzfzpmHAdj0e8GkKp",
            "type": "string"
          },
          "variants": {
            "description": "An array of variants for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "type": "array"
          }
        },
        "required": ["_id", "locationId", "name", "productType", "createdAt", "updatedAt"],
        "type": "object"
      },
      "GetProductStatsResponseDto": {
        "properties": {
          "excludedFromStore": {
            "description": "Number of products excluded from the store",
            "example": 20,
            "type": "number"
          },
          "includedInStore": {
            "description": "Number of products included in the store",
            "example": 80,
            "type": "number"
          },
          "totalProducts": {
            "description": "Total number of products",
            "example": 100,
            "type": "number"
          }
        },
        "required": ["totalProducts", "includedInStore", "excludedFromStore"],
        "type": "object"
      },
      "InventoryItemDto": {
        "properties": {
          "_id": {
            "description": "The unique identifier for the price",
            "example": "6241712be68f7a98102ba272",
            "type": "string"
          },
          "allowOutOfStockPurchases": {
            "description": "Whether out of stock purchases are allowed",
            "example": false,
            "type": "boolean"
          },
          "availableQuantity": {
            "description": "Available quantity in inventory",
            "example": 50,
            "type": "number"
          },
          "image": {
            "description": "Product image URL",
            "example": "https://example.com/images/product.jpg",
            "type": "string"
          },
          "name": {
            "description": "Name of the price/variant",
            "example": "Medium T-shirt",
            "type": "string"
          },
          "product": {
            "description": "Product ID this price belongs to",
            "example": "6241712be68f7a98102ba270",
            "type": "string"
          },
          "productName": {
            "description": "Product name",
            "example": "T-shirt",
            "type": "string"
          },
          "sku": {
            "description": "SKU for the product variant",
            "example": "TSHIRT-MED-001",
            "type": "string"
          },
          "updatedAt": {
            "description": "Last update timestamp",
            "example": "2023-12-12T09:27:42.355Z",
            "type": "string"
          }
        },
        "required": ["_id", "name", "availableQuantity", "sku", "allowOutOfStockPurchases", "product", "updatedAt"],
        "type": "object"
      },
      "ListCollectionResponseDto": {
        "properties": {
          "data": {
            "description": "Array of Collections",
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "total": {
            "description": "The total count of the collections present, which is useful to calculate the pagination",
            "type": "number"
          }
        },
        "required": ["data", "total"],
        "type": "object"
      },
      "ListPricesResponseDto": {
        "properties": {
          "prices": {
            "description": "An array of prices",
            "items": {
              "$ref": "#/components/schemas/DefaultPriceResponseDto"
            },
            "type": "array"
          },
          "total": {
            "default": "Total number of prices available",
            "example": 10,
            "type": "number"
          }
        },
        "required": ["prices", "total"],
        "type": "object"
      },
      "ListProductReviewsResponseDto": {
        "properties": {
          "data": {
            "description": "Array of Collections",
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "total": {
            "description": "The total count of the collections present, which is useful to calculate the pagination",
            "type": "number"
          }
        },
        "required": ["data", "total"],
        "type": "object"
      },
      "ListProductsResponseDto": {
        "properties": {
          "products": {
            "description": "An array of products",
            "items": {
              "$ref": "#/components/schemas/DefaultProductResponseDto"
            },
            "type": "array"
          },
          "total": {
            "description": "list products status",
            "items": {
              "$ref": "#/components/schemas/ListProductsStats"
            },
            "type": "array"
          }
        },
        "required": ["products", "total"],
        "type": "object"
      },
      "ListProductsStats": {
        "properties": {
          "total": {
            "description": "Total number of products",
            "example": 20,
            "type": "number"
          }
        },
        "required": ["total"],
        "type": "object"
      },
      "MembershipOfferDto": {
        "properties": {
          "_id": {
            "description": "The unique identifier for the membership offer.",
            "example": "655b33aa2209e60b6adb87a7",
            "type": "string"
          },
          "label": {
            "description": "Membership offer label",
            "example": "top_50",
            "type": "string"
          },
          "value": {
            "description": "Membership offer label",
            "example": "50",
            "type": "string"
          }
        },
        "required": ["label", "value", "_id"],
        "type": "object"
      },
      "PriceDimensionsDto": {
        "properties": {
          "height": {
            "description": "Height of the price",
            "example": 10,
            "type": "number"
          },
          "length": {
            "description": "Length of the price",
            "example": 10,
            "type": "number"
          },
          "unit": {
            "description": "Unit of the price dimensions",
            "enum": ["cm", "in", "m"],
            "example": "cm",
            "type": "string"
          },
          "width": {
            "description": "Width of the price",
            "example": 10,
            "type": "number"
          }
        },
        "required": ["height", "width", "length", "unit"],
        "type": "object"
      },
      "PriceMetaDto": {
        "properties": {
          "internalSource": {
            "description": "The internal source of the price.",
            "enum": ["agency_plan", "funnel", "membership", "communities", "gokollab"],
            "example": "agency_plan",
            "type": "string"
          },
          "source": {
            "description": "The source of the price.",
            "enum": ["stripe", "woocommerce", "shopify"],
            "example": "stripe",
            "type": "string"
          },
          "sourceId": {
            "description": "The id of the source of the price from where it is imported",
            "example": "123",
            "type": "string"
          },
          "stripePriceId": {
            "description": "The Stripe price ID associated with the price.",
            "example": "price_123",
            "type": "string"
          }
        },
        "required": ["source", "stripePriceId", "internalSource"],
        "type": "object"
      },
      "PriceUpdateField": {
        "properties": {
          "roundToWhole": {
            "description": "Round to nearest whole number",
            "example": true,
            "type": "boolean"
          },
          "type": {
            "description": "Type of price update",
            "enum": [
              "INCREASE_BY_AMOUNT",
              "REDUCE_BY_AMOUNT",
              "SET_NEW_PRICE",
              "INCREASE_BY_PERCENTAGE",
              "REDUCE_BY_PERCENTAGE"
            ],
            "example": "INCREASE_BY_AMOUNT",
            "type": "string"
          },
          "value": {
            "description": "Value to update (amount or percentage based on type)",
            "example": 100,
            "type": "number"
          }
        },
        "required": ["type", "value"],
        "type": "object"
      },
      "ProductCategories": {
        "properties": {},
        "type": "object"
      },
      "ProductLabelDto": {
        "properties": {
          "endDate": {
            "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
            "example": "2024-06-30T05:43:39.000Z",
            "type": "string"
          },
          "startDate": {
            "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
            "example": "2024-06-26T05:43:35.000Z",
            "type": "string"
          },
          "title": {
            "description": "The content for the product label.",
            "example": "Featured",
            "type": "string"
          }
        },
        "required": ["title"],
        "type": "object"
      },
      "ProductMediaDto": {
        "properties": {
          "id": {
            "description": "The unique identifier for the media.",
            "example": "fzrgusiuu0m",
            "type": "string"
          },
          "isFeatured": {
            "description": "Indicates whether the media is featured.",
            "example": true,
            "type": "boolean"
          },
          "priceIds": {
            "description": "Mongo ObjectIds of the prices for which the media is assigned",
            "example": "6578278e879ad2646715ba9c",
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "title": {
            "description": "The title of the media file.",
            "example": "1dd7dcd0-e71d-4cf7-a06b-6d47723d6a29.png",
            "type": "string"
          },
          "type": {
            "description": "The type of the media file (e.g., image, video will be supporting soon).",
            "enum": ["image", "video"],
            "example": "image",
            "type": "string"
          },
          "url": {
            "description": "The URL where the media file is stored.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/sample.png",
            "type": "string"
          }
        },
        "required": ["id", "url", "type"],
        "type": "object"
      },
      "ProductReviewDto": {
        "properties": {
          "comment": {
            "description": "Detailed Review of the product",
            "example": "This product exceeded my expectations in terms of quality and performance. Highly recommended!",
            "maxLength": 5000,
            "minLength": 0,
            "type": "string"
          },
          "headline": {
            "description": "Headline of the Review",
            "example": "Amazing product with great quality",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetailsDto"
              }
            ],
            "description": "User who is giving the review/reply"
          }
        },
        "required": ["headline", "comment", "user"],
        "type": "object"
      },
      "ProductSEODto": {
        "properties": {
          "description": {
            "description": "SEO Description for the product which will be displayed in the preview",
            "example": "New iPhone with all new features",
            "type": "string"
          },
          "title": {
            "description": "SEO title of the product which will be displayed in the preview",
            "example": "Apple iPhone 14",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductVariantDto": {
        "properties": {
          "id": {
            "description": "A unique identifier for the variant.",
            "example": "38s63qmxfr4",
            "type": "string"
          },
          "name": {
            "description": "The name of the variant.",
            "example": "Size",
            "type": "string"
          },
          "options": {
            "description": "An array of options for the variant.",
            "items": {
              "$ref": "#/components/schemas/ProductVariantOptionDto"
            },
            "type": "array"
          }
        },
        "required": ["id", "name", "options"],
        "type": "object"
      },
      "ProductVariantOptionDto": {
        "properties": {
          "id": {
            "description": "The unique identifier for the option.",
            "example": "h4z7u0im2q8",
            "type": "string"
          },
          "name": {
            "description": "The name of the option.",
            "example": "XL",
            "type": "string"
          }
        },
        "required": ["id", "name"],
        "type": "object"
      },
      "RecurringDto": {
        "properties": {
          "interval": {
            "description": "The interval at which the recurring event occurs.",
            "enum": ["day", "month", "week", "year"],
            "example": "day",
            "type": "string"
          },
          "intervalCount": {
            "description": "The number of intervals between each occurrence of the event.",
            "example": 1,
            "type": "number"
          }
        },
        "required": ["interval", "intervalCount"],
        "type": "object"
      },
      "ShippingOptionsDto": {
        "properties": {
          "dimensions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceDimensionsDto"
              }
            ],
            "description": "Dimensions of the product"
          },
          "weight": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WeightOptionsDto"
              }
            ],
            "description": "Weight options of the product"
          }
        },
        "type": "object"
      },
      "UnauthorizedDTO": {
        "properties": {
          "error": {
            "example": "Unauthorized",
            "type": "string"
          },
          "message": {
            "example": "Invalid token: access token is invalid",
            "type": "string"
          },
          "statusCode": {
            "example": 401,
            "type": "number"
          }
        },
        "type": "object"
      },
      "UnprocessableDTO": {
        "properties": {
          "error": {
            "example": "Unprocessable Entity",
            "type": "string"
          },
          "message": {
            "example": ["Unprocessable Entity"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "statusCode": {
            "example": 422,
            "type": "number"
          }
        },
        "type": "object"
      },
      "UpdateInventoryDto": {
        "properties": {
          "altId": {
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "altType": {
            "enum": ["location"],
            "type": "string"
          },
          "items": {
            "description": "Array of items to update in the inventory.",
            "items": {
              "$ref": "#/components/schemas/UpdateInventoryItemDto"
            },
            "type": "array"
          }
        },
        "required": ["altId", "altType", "items"],
        "type": "object"
      },
      "UpdateInventoryItemDto": {
        "properties": {
          "allowOutOfStockPurchases": {
            "description": "Whether to continue selling the item when out of stock.",
            "example": false,
            "type": "boolean"
          },
          "availableQuantity": {
            "description": "The available quantity of the item.",
            "example": 10,
            "type": "number"
          },
          "priceId": {
            "description": "The unique identifier for the price, in MongoDB ID format.",
            "example": "5e9f8f8f8f8f8f8f8f8f8f8",
            "type": "string"
          }
        },
        "required": ["priceId"],
        "type": "object"
      },
      "UpdateInventoryResponseDto": {
        "properties": {
          "message": {
            "description": "Success message",
            "example": "Successfully created",
            "type": "string"
          },
          "status": {
            "description": "Status of api action",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "UpdatePriceDto": {
        "properties": {
          "allowOutOfStockPurchases": {
            "description": "Continue selling when out of stock",
            "example": true,
            "type": "boolean"
          },
          "amount": {
            "description": "The amount of the price. ( min: 0 )",
            "example": 99.99,
            "type": "number"
          },
          "availableQuantity": {
            "description": "Available inventory stock quantity",
            "example": 5,
            "type": "number"
          },
          "compareAtPrice": {
            "description": "The compare at price for the price.",
            "example": 19.99,
            "type": "number"
          },
          "currency": {
            "description": "The currency of the price.",
            "example": "USD",
            "type": "string"
          },
          "description": {
            "description": "A brief description of the price.",
            "type": "string"
          },
          "digitalDelivery": {
            "description": "Digital delivery options",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "isDigitalProduct": {
            "description": "Is the product a digital product",
            "example": true,
            "type": "boolean"
          },
          "locationId": {
            "description": "The unique identifier of the location associated with the price.",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "membershipOffers": {
            "description": "An array of membership offers associated with the price.",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "type": "array"
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriceMetaDto"
              }
            ],
            "description": "Additional metadata associated with the price."
          },
          "name": {
            "description": "The name of the price.",
            "example": "Price Name",
            "type": "string"
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "setupFee": {
            "description": "The setup fee for the price.",
            "example": 10.99,
            "type": "number"
          },
          "shippingOptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ShippingOptionsDto"
              }
            ],
            "description": "Shipping options of the Price"
          },
          "sku": {
            "description": "The unique identifier of the SKU associated with the price",
            "example": "sku_123",
            "type": "string"
          },
          "totalCycles": {
            "description": "The total number of billing cycles for the price. ( min: 1 )",
            "example": 12,
            "type": "number"
          },
          "trackInventory": {
            "description": "Need to track inventory stock quantity",
            "example": true,
            "type": "boolean"
          },
          "trialPeriod": {
            "description": "The trial period duration in days (if applicable).",
            "example": 7,
            "type": "number"
          },
          "type": {
            "description": "The type of the price.",
            "enum": ["one_time", "recurring"],
            "example": "one_time",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier of the user who created the price.",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "variantOptionIds": {
            "description": "An array of variant option IDs associated with the price.",
            "example": ["option_id_1", "option_id_2"],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["name", "type", "currency", "amount", "locationId"],
        "type": "object"
      },
      "UpdatePriceResponseDto": {
        "properties": {
          "_id": {
            "description": "The unique identifier for the price.",
            "example": "655b33aa2209e60b6adb87a7",
            "type": "string"
          },
          "allowOutOfStockPurchases": {
            "description": "Continue selling when out of stock",
            "example": true,
            "type": "boolean"
          },
          "amount": {
            "description": "The amount of the price.",
            "example": 199999,
            "type": "number"
          },
          "availableQuantity": {
            "description": "Available inventory stock quantity",
            "example": 5,
            "type": "number"
          },
          "compareAtPrice": {
            "description": "The compare-at price for comparison purposes.",
            "example": 2000000,
            "type": "number"
          },
          "createdAt": {
            "description": "The creation timestamp of the price.",
            "example": "2023-11-20T10:23:38.645Z",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "The currency code for the price.",
            "example": "INR",
            "type": "string"
          },
          "locationId": {
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6",
            "type": "string"
          },
          "membershipOffers": {
            "description": "An array of membership offers associated with the price.",
            "items": {
              "$ref": "#/components/schemas/MembershipOfferDto"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the price.",
            "example": "Red / S",
            "type": "string"
          },
          "product": {
            "description": "The unique identifier for the associated product.",
            "example": "655b33a82209e60b6adb87a5",
            "type": "string"
          },
          "recurring": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RecurringDto"
              }
            ],
            "description": "The recurring details of the price (if type is recurring)."
          },
          "trackInventory": {
            "description": "Indicates whether inventory tracking is enabled.",
            "example": null,
            "type": "boolean"
          },
          "type": {
            "description": "The type of the price (e.g., one_time).",
            "enum": ["one_time", "recurring"],
            "example": "one_time",
            "type": "string"
          },
          "updatedAt": {
            "description": "The last update timestamp of the price.",
            "example": "2024-01-23T09:57:04.852Z",
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier for the user.",
            "example": "6YAtzfzpmHAdj0e8GkKp",
            "type": "string"
          },
          "variantOptionIds": {
            "description": "An array of variant option IDs associated with the price.",
            "example": ["h4z7u0im2q8", "h3nst2ltsnn"],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["_id", "name", "type", "currency", "amount"],
        "type": "object"
      },
      "UpdateProductCollectionResponseDto": {
        "properties": {
          "message": {
            "description": "Success message",
            "example": "Successfully created",
            "type": "string"
          },
          "status": {
            "description": "Status of api action",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "UpdateProductCollectionsDto": {
        "properties": {
          "altId": {
            "description": "Location Id",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "altType": {
            "description": "The type of alt. For now it is only LOCATION",
            "enum": ["location"],
            "example": "LOCATION",
            "type": "string"
          },
          "image": {
            "description": "The URL of the image that is going to be displayed as the collection Thumbnail",
            "example": "http://example.com/watermark.png",
            "type": "string"
          },
          "name": {
            "description": "Name of the Product Collection",
            "example": "Best Sellers",
            "type": "string"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CollectionSEODto"
              }
            ],
            "description": "The metadata information which will be displayed in SEO previews"
          },
          "slug": {
            "description": "Slug of the Product Collection which helps in navigation",
            "example": "best-sellers",
            "type": "string"
          }
        },
        "required": ["altId", "altType"],
        "type": "object"
      },
      "UpdateProductDto": {
        "properties": {
          "automaticTaxCategoryId": {
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5",
            "type": "string"
          },
          "availableInStore": {
            "description": "Indicates whether the product is available in-store.",
            "example": true,
            "type": "boolean"
          },
          "collectionIds": {
            "description": "An array of category Ids for the product",
            "example": ["65d71377c326ea78e1c47df5", "65d71377c326ea78e1c47d34"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "A brief description of the product.",
            "example": "Product description goes here.",
            "type": "string"
          },
          "image": {
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png",
            "type": "string"
          },
          "isLabelEnabled": {
            "default": false,
            "description": "Is the product label enabled. If this is true, label object cannot be empty.",
            "example": true,
            "type": "boolean"
          },
          "isTaxesEnabled": {
            "default": false,
            "description": "Are there any taxes attached to the product. If this is true, taxes array cannot be empty.",
            "example": true,
            "type": "boolean"
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "Details for Product Label"
          },
          "locationId": {
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6",
            "type": "string"
          },
          "medias": {
            "description": "An array of medias for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductMediaDto"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the product.",
            "example": "Awesome Product",
            "type": "string"
          },
          "productType": {
            "enum": ["DIGITAL", "PHYSICAL", "SERVICE", "PHYSICAL/DIGITAL"],
            "type": "string"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSEODto"
              }
            ],
            "description": "SEO data for the product that will be displayed in the preview"
          },
          "slug": {
            "description": "The slug using which the product navigation will be handled",
            "example": "awesome-product",
            "type": "string"
          },
          "statementDescriptor": {
            "description": "The statement descriptor for the product.",
            "example": "abcde",
            "type": "string"
          },
          "taxes": {
            "description": "List of ids of Taxes attached to the Product. If taxes are passed, isTaxesEnabled should be true.",
            "example": ["654492a4e6bef380114de15a"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "variants": {
            "description": "An array of variants for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "type": "array"
          }
        },
        "required": ["name", "locationId", "productType"],
        "type": "object"
      },
      "UpdateProductResponseDto": {
        "properties": {
          "_id": {
            "description": "The unique identifier for the product.",
            "example": "655b33a82209e60b6adb87a5",
            "type": "string"
          },
          "automaticTaxCategoryId": {
            "description": "Tax category ID for Automatic taxes calculation.",
            "example": "65d71377c326ea78e1c47df5",
            "type": "string"
          },
          "availableInStore": {
            "description": "Indicates whether the product is available in-store.",
            "example": true,
            "type": "boolean"
          },
          "collectionIds": {
            "description": "An array of category Ids for the product",
            "example": ["65d71377c326ea78e1c47df5", "65d71377c326ea78e1c47d34"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createdAt": {
            "description": "The creation timestamp of the product.",
            "example": "2023-11-20T10:23:36.515Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "product description",
            "example": "This is a really awesome product",
            "type": "string"
          },
          "image": {
            "description": "The URL for the product image.",
            "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png",
            "type": "string"
          },
          "isLabelEnabled": {
            "default": false,
            "description": "A boolean representing whether a product label is enabled or not",
            "example": true,
            "type": "boolean"
          },
          "isTaxesEnabled": {
            "default": false,
            "description": "The field indicates whether taxes are enabled for the product or not.",
            "example": true,
            "type": "boolean"
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductLabelDto"
              }
            ],
            "description": "The Product label details"
          },
          "locationId": {
            "description": "The unique identifier for the location.",
            "example": "3SwdhCsvxI8Au3KsPJt6",
            "type": "string"
          },
          "medias": {
            "description": "An array of medias for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductMediaDto"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the product.",
            "example": "Awesome Product",
            "type": "string"
          },
          "productType": {
            "description": "The type of the product (e.g., PHYSICAL).",
            "example": "PHYSICAL",
            "type": "string"
          },
          "seo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProductSEODto"
              }
            ],
            "description": "The SEO information for the product requested"
          },
          "slug": {
            "description": "The slug of the product by which the product will be navigated",
            "example": "washing-machine",
            "type": "string"
          },
          "statementDescriptor": {
            "description": "The statement descriptor for the product.",
            "example": "abcde",
            "type": "string"
          },
          "taxes": {
            "description": "An array of ids of Taxes attached to the Product. If the expand query includes tax, the taxes will be of type `ProductTaxDto`. Please refer to the `ProductTaxDto` for additional details.",
            "example": ["654492a4e6bef380114de15a"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updatedAt": {
            "description": "The last update timestamp of the product.",
            "example": "2024-01-23T09:57:04.846Z",
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "description": "The unique identifier for the user who created the product.",
            "example": "6YAtzfzpmHAdj0e8GkKp",
            "type": "string"
          },
          "variants": {
            "description": "An array of variants for the product.",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDto"
            },
            "type": "array"
          }
        },
        "required": ["_id", "locationId", "name", "productType", "createdAt", "updatedAt"],
        "type": "object"
      },
      "UpdateProductReviewDto": {
        "properties": {
          "altId": {
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "altType": {
            "enum": ["location"],
            "type": "string"
          },
          "detail": {
            "description": "Detailed Review of the product",
            "example": "The product is for sure a must and recommended buy",
            "type": "string"
          },
          "headline": {
            "description": "Headline of the Review",
            "example": "Amazing product with great quality",
            "type": "string"
          },
          "productId": {
            "description": "Product Id",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "rating": {
            "description": "Rating of the product",
            "example": "4.5",
            "type": "number"
          },
          "reply": {
            "description": "Reply of the review",
            "items": {
              "$ref": "#/components/schemas/ProductReviewDto"
            },
            "type": "array"
          },
          "status": {
            "description": "Status of the review",
            "example": "approved",
            "type": "string"
          }
        },
        "required": ["altId", "altType", "productId", "status"],
        "type": "object"
      },
      "UpdateProductReviewObjectDto": {
        "properties": {
          "productId": {
            "description": "Product Id",
            "example": "6578278e879ad2646715ba9d",
            "type": "string"
          },
          "reviewId": {
            "description": "Review Id",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "storeId": {
            "description": "Store Id",
            "example": "a1b2c3d4e5f6g7h8i9j0k1l2",
            "type": "string"
          }
        },
        "required": ["reviewId", "productId", "storeId"],
        "type": "object"
      },
      "UpdateProductReviewsDto": {
        "properties": {
          "altId": {
            "description": "Location Id or Agency Id",
            "example": "6578278e879ad2646715ba9c",
            "type": "string"
          },
          "altType": {
            "enum": ["location"],
            "type": "string"
          },
          "reviews": {
            "description": "Array of Product Reviews",
            "items": {
              "$ref": "#/components/schemas/UpdateProductReviewObjectDto"
            },
            "type": "array"
          },
          "status": {
            "description": "Status of the review",
            "example": "approved",
            "type": "object"
          }
        },
        "required": ["altId", "altType", "reviews", "status"],
        "type": "object"
      },
      "UpdateProductReviewsResponseDto": {
        "properties": {
          "message": {
            "description": "Success message",
            "example": "Successfully created",
            "type": "string"
          },
          "status": {
            "description": "Status of api action",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "UpdateProductStoreDto": {
        "properties": {
          "action": {
            "description": "Action to include or exclude the product from the store",
            "enum": ["include", "exclude"],
            "example": "include",
            "type": "string"
          },
          "productIds": {
            "description": "Array of product IDs",
            "example": ["productId1", "productId2"],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["action", "productIds"],
        "type": "object"
      },
      "UpdateProductStoreResponseDto": {
        "properties": {
          "message": {
            "description": "Success message",
            "example": "Successfully created",
            "type": "string"
          },
          "status": {
            "description": "Status of api action",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["status"],
        "type": "object"
      },
      "UserDetailsDto": {
        "properties": {
          "email": {
            "description": "Email of the customer",
            "example": "example@example.com",
            "type": "string"
          },
          "isCustomer": {
            "description": "Is the person an admin or customer",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "Name of the customer",
            "example": "John Doe",
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "phone": {
            "description": "Phone no of the customer",
            "example": "+1-555-555-5555",
            "type": "string"
          }
        },
        "required": ["name", "email"],
        "type": "object"
      },
      "WeightOptionsDto": {
        "properties": {
          "unit": {
            "description": "Weight unit of the product",
            "enum": ["kg", "lb", "g", "oz"],
            "example": "kg",
            "type": "string"
          },
          "value": {
            "description": "Actual weight of the product",
            "example": 10,
            "type": "number"
          }
        },
        "required": ["value", "unit"],
        "type": "object"
      }
    },
    "securitySchemes": {
      "Agency-Access": {
        "bearerFormat": "JWT",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "in": "header",
        "name": "Authorization",
        "scheme": "bearer",
        "type": "http"
      },
      "Location-Access": {
        "bearerFormat": "JWT",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "in": "header",
        "name": "Authorization",
        "scheme": "bearer",
        "type": "http"
      },
      "bearer": {
        "bearerFormat": "JWT",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "in": "header",
        "name": "Authorization",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {},
    "description": "Documentation for products API",
    "title": "Products API",
    "version": "1.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/products/": {
      "get": {
        "description": "The \"List Products\" API allows to retrieve a paginated list of products. Customize your results by filtering products based on name or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve product information.",
        "operationId": "list-invoices",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "The maximum number of items to be included in a single page of results",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 0,
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "type": "number"
            }
          },
          {
            "description": "LocationId is the id of the sub-account",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "example": "3SwdhCu3svxI8AKsPJt6",
              "type": "string"
            }
          },
          {
            "description": "The name of the product for searching.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "example": "Awesome product",
              "type": "string"
            }
          },
          {
            "description": "Filter by product category Ids. Supports comma separated values",
            "in": "query",
            "name": "collectionIds",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The slug value of the collection by which the collection would be searched",
            "in": "query",
            "name": "collectionSlug",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of an entity whose data has to be fetched along with product. Possible entities are tax, stripe and paypal. If not mentioned, only ID will be returned in case of taxes",
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "List of product ids to be fetched.",
            "in": "query",
            "name": "productIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "fetch and project products based on the storeId",
            "in": "query",
            "name": "storeId",
            "required": false,
            "schema": {
              "example": "3SwdhCu3svxI8AKsPJt6",
              "type": "string"
            }
          },
          {
            "description": "Separate products by which are included in the store and which are not",
            "in": "query",
            "name": "includedInStore",
            "required": false,
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "description": "If the product is included in the online store",
            "in": "query",
            "name": "availableInStore",
            "required": false,
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "description": "The order of sort which should be applied for the date",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "enum": ["asc", "desc"],
              "example": "desc",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProductsResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "List Products",
        "tags": ["Products"]
      },
      "post": {
        "description": "The \"Create Product\" API allows adding a new product to the system. Use this endpoint to create a product with the specified details. Ensure that the required information is provided in the request payload.",
        "operationId": "create-product",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProductResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "Create Product",
        "tags": ["Products"]
      }
    },
    "/products/bulk-update": {
      "post": {
        "description": "API to bulk update products (price, availability, collections, delete)",
        "operationId": "bulkUpdate",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkUpdateDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkUpdateResponseDto"
                }
              }
            },
            "description": "Products updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Bulk Update Products",
        "tags": ["Products"]
      }
    },
    "/products/collections": {
      "get": {
        "description": "Internal API to fetch the Product Collections",
        "operationId": "get-product-collection",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "The maximum number of items to be included in a single page of results",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "type": "number"
            }
          },
          {
            "description": "Location Id",
            "in": "query",
            "name": "altId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "description": "The type of alt. For now it is only LOCATION",
            "in": "query",
            "name": "altType",
            "required": true,
            "schema": {
              "enum": ["location"],
              "example": "LOCATION",
              "type": "string"
            }
          },
          {
            "description": "Ids of the collections separated by comma(,) for search purposes",
            "in": "query",
            "name": "collectionIds",
            "required": false,
            "schema": {
              "example": "65d71377c326ea78e1c47df5,65d71377c326ea78e1c47d34",
              "type": "string"
            }
          },
          {
            "description": "Query to search collection based on names",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "Best Sellers",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Fetch Product Collections",
        "tags": ["Collections"]
      },
      "post": {
        "description": "Create a new Product Collection for a specific location",
        "operationId": "create-product-collection",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductCollectionsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCollectionResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Create Product Collection",
        "tags": ["Collections"]
      }
    },
    "/products/collections/{collectionId}": {
      "delete": {
        "description": "Delete specific product collection with Id :collectionId",
        "operationId": "delete-product-collection",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "MongoId of the collection",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "schema": {
              "example": "65d71377c326ea78e1c47df5",
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "in": "query",
            "name": "altId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "description": "The type of alt. For now it is only LOCATION",
            "in": "query",
            "name": "altType",
            "required": true,
            "schema": {
              "enum": ["location"],
              "example": "LOCATION",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProductCollectionResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Delete Product Collection",
        "tags": ["Collections"]
      },
      "get": {
        "description": "Get Details about individual product collection",
        "operationId": "get-product-collection_get",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Collection Id",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "schema": {
              "example": "65d71377c326ea78e1c47df5",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultCollectionResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Get Details about individual product collection",
        "tags": ["Collections"]
      },
      "put": {
        "description": "Update a specific product collection with Id :collectionId",
        "operationId": "update-product-collection",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "MongoId of the collection",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "schema": {
              "example": "65d71377c326ea78e1c47df5",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductCollectionsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProductCollectionResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Update Product Collection",
        "tags": ["Collections"]
      }
    },
    "/products/inventory": {
      "get": {
        "description": "The \"List Inventory API allows the user to retrieve a paginated list of inventory items. Use this endpoint to fetch details for multiple items in the inventory based on the provided query parameters.",
        "operationId": "get-list-inventory",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "The maximum number of items to be included in a single page of results",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 0,
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "type": "number"
            }
          },
          {
            "description": "Location Id or Agency Id",
            "in": "query",
            "name": "altId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "altType",
            "required": true,
            "schema": {
              "enum": ["location"],
              "type": "string"
            }
          },
          {
            "description": "Search string for Variant Search",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "example": "Product Name",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInventoryResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "List Inventory",
        "tags": ["Prices"]
      },
      "post": {
        "description": "The Update Inventory API allows the user to bulk update the inventory for multiple items. Use this endpoint to update the available quantity and out-of-stock purchase settings for multiple items in the inventory.",
        "operationId": "update-inventory",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateInventoryResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "Update Inventory",
        "tags": ["Prices"]
      }
    },
    "/products/reviews": {
      "get": {
        "description": "API to fetch the Product Reviews",
        "operationId": "get-product-reviews",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id or Agency Id",
            "in": "query",
            "name": "altId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "altType",
            "required": true,
            "schema": {
              "enum": ["location"],
              "type": "string"
            }
          },
          {
            "description": "The maximum number of items to be included in a single page of results",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 0,
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "type": "number"
            }
          },
          {
            "description": "The field upon which the sort should be applied",
            "in": "query",
            "name": "sortField",
            "required": false,
            "schema": {
              "enum": ["createdAt", "rating"],
              "example": "rating",
              "type": "string"
            }
          },
          {
            "description": "The order of sort which should be applied for the sortField",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "enum": ["asc", "desc"],
              "example": "desc",
              "type": "string"
            }
          },
          {
            "description": "Key to filter the ratings ",
            "in": "query",
            "name": "rating",
            "required": false,
            "schema": {
              "example": 4,
              "type": "number"
            }
          },
          {
            "description": "The start date for filtering reviews",
            "in": "query",
            "name": "startDate",
            "required": false,
            "schema": {
              "example": "2023-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "The end date for filtering reviews",
            "in": "query",
            "name": "endDate",
            "required": false,
            "schema": {
              "example": "2023-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of product IDs",
            "in": "query",
            "name": "productId",
            "required": false,
            "schema": {
              "example": "60d21b4667d0d8992e610c88,60d21b4667d0d8992e610c89,60d21b4667d0d8992e610c8a",
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of store IDs",
            "in": "query",
            "name": "storeId",
            "required": false,
            "schema": {
              "example": "60d21b4667d0d8992e610c85,60d21b4667d0d8992e610c86,60d21b4667d0d8992e610c87",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProductReviewsResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Fetch Product Reviews",
        "tags": ["Reviews"]
      }
    },
    "/products/reviews/bulk-update": {
      "post": {
        "description": "Update one or multiple product reviews: status, reply, etc.",
        "operationId": "bulk-update-product-review",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductReviewsDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProductReviewsResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Update Product Reviews",
        "tags": ["Reviews"]
      }
    },
    "/products/reviews/count": {
      "get": {
        "description": "API to fetch the Review Count as per status",
        "operationId": "get-reviews-count",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id or Agency Id",
            "in": "query",
            "name": "altId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "altType",
            "required": true,
            "schema": {
              "enum": ["location"],
              "type": "string"
            }
          },
          {
            "description": "Key to filter the ratings ",
            "in": "query",
            "name": "rating",
            "required": false,
            "schema": {
              "example": 4,
              "type": "number"
            }
          },
          {
            "description": "The start date for filtering reviews",
            "in": "query",
            "name": "startDate",
            "required": false,
            "schema": {
              "example": "2023-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "The end date for filtering reviews",
            "in": "query",
            "name": "endDate",
            "required": false,
            "schema": {
              "example": "2023-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of product IDs",
            "in": "query",
            "name": "productId",
            "required": false,
            "schema": {
              "example": "60d21b4667d0d8992e610c88,60d21b4667d0d8992e610c89,60d21b4667d0d8992e610c8a",
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of store IDs",
            "in": "query",
            "name": "storeId",
            "required": false,
            "schema": {
              "example": "60d21b4667d0d8992e610c85,60d21b4667d0d8992e610c86,60d21b4667d0d8992e610c87",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountReviewsByStatusResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Fetch Review Count as per status",
        "tags": ["Reviews"]
      }
    },
    "/products/reviews/{reviewId}": {
      "delete": {
        "description": "Delete specific product review",
        "operationId": "delete-product-review",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Review Id",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "description": "Location Id or Agency Id",
            "in": "query",
            "name": "altId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "altType",
            "required": true,
            "schema": {
              "enum": ["location"],
              "type": "string"
            }
          },
          {
            "description": "Product Id of the product",
            "in": "query",
            "name": "productId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProductReviewResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Delete Product Review",
        "tags": ["Reviews"]
      },
      "put": {
        "description": "Update status, reply, etc of a particular review",
        "operationId": "update-product-review",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Review Id",
            "in": "path",
            "name": "reviewId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductReviewDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProductReviewsResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Update Product Reviews",
        "tags": ["Reviews"]
      }
    },
    "/products/store/{storeId}": {
      "post": {
        "description": "API to update the status of products in a particular store",
        "operationId": "update-store-status",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Products related to the store",
            "in": "path",
            "name": "storeId",
            "required": true,
            "schema": {
              "example": "3SwdhCu3svxI8AKsPJt6",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductStoreDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProductStoreResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Action to include/exclude the product in store",
        "tags": ["Store"]
      }
    },
    "/products/store/{storeId}/stats": {
      "get": {
        "description": "API to fetch the total number of products, included in the store, and excluded from the store and other stats",
        "operationId": "get-product-store-stats",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Products related to the store",
            "in": "path",
            "name": "storeId",
            "required": true,
            "schema": {
              "example": "3SwdhCu3svxI8AKsPJt6",
              "type": "string"
            }
          },
          {
            "description": "Location Id or Agency Id",
            "in": "query",
            "name": "altId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "altType",
            "required": true,
            "schema": {
              "enum": ["location"],
              "type": "string"
            }
          },
          {
            "description": "The name of the product for searching.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "example": "Awesome product",
              "type": "string"
            }
          },
          {
            "description": "Filter by product collection Ids. Supports comma separated values",
            "in": "query",
            "name": "collectionIds",
            "required": false,
            "schema": {
              "example": "65c2789a812e52f9bd6ec577,65c2789a812e52de9a6ec576",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductStatsResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Fetch Product Store Stats",
        "tags": ["Store"]
      }
    },
    "/products/{productId}": {
      "delete": {
        "description": "The \"Delete Product by ID\" API allows deleting a specific product using its unique identifier. Use this endpoint to remove a product from the system.",
        "operationId": "delete-product-by-id",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "ID or the slug of the product that needs to be returned",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "description": "location Id",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteProductResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "Delete Product by ID",
        "tags": ["Products"]
      },
      "get": {
        "description": "The \"Get Product by ID\" API allows to retrieve information for a specific product using its unique identifier. Use this endpoint to fetch details for a single product based on the provided product ID.",
        "operationId": "get-product-by-id",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "ID or the slug of the product that needs to be returned",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "description": "location Id",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProductResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Product not found"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "Get Product by ID",
        "tags": ["Products"]
      },
      "put": {
        "description": "The \"Update Product by ID\" API allows modifying information for a specific product using its unique identifier. Use this endpoint to update details for a single product based on the provided product ID.",
        "operationId": "update-product-by-id",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "ID or the slug of the product that needs to be returned",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateProductResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "Update Product by ID",
        "tags": ["Products"]
      }
    },
    "/products/{productId}/price": {
      "get": {
        "description": "The \"List Prices for a Product\" API allows retrieving a paginated list of prices associated with a specific product. Customize your results by filtering prices or paginate through the list using the provided query parameters.",
        "operationId": "list-prices-for-product",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "ID of the product that needs to be used",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "description": "The maximum number of items to be included in a single page of results",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 0,
              "example": 20,
              "type": "number"
            }
          },
          {
            "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "default": 0,
              "example": 0,
              "type": "number"
            }
          },
          {
            "description": "The unique identifier for the location.",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "example": "3SwdhCsvxI8Au3KsPJt6",
              "type": "string"
            }
          },
          {
            "description": "To filter the response only with the given price ids, Please provide with comma separated",
            "in": "query",
            "name": "ids",
            "required": false,
            "schema": {
              "example": "6241712be68f7a98102ba272,632027d51f7876cd3020213d",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPricesResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "List Prices for a Product",
        "tags": ["Prices"]
      },
      "post": {
        "description": "The \"Create Price for a Product\" API allows adding a new price associated with a specific product to the system. Use this endpoint to create a price with the specified details for a particular product. Ensure that the required information is provided in the request payload.",
        "operationId": "create-price-for-product",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "ID of the product that needs to be used",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePriceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePriceResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "Create Price for a Product",
        "tags": ["Prices"]
      }
    },
    "/products/{productId}/price/{priceId}": {
      "delete": {
        "description": "The \"Delete Price by ID for a Product\" API allows deleting a specific price associated with a particular product using its unique identifier. Use this endpoint to remove a price from the system.",
        "operationId": "delete-price-by-id-for-product",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "ID of the product that needs to be used",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "description": "ID of the price that needs to be returned",
            "in": "path",
            "name": "priceId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "description": "location Id",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePriceResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "Delete Price by ID for a Product",
        "tags": ["Prices"]
      },
      "get": {
        "description": "The \"Get Price by ID for a Product\" API allows retrieving information for a specific price associated with a particular product using its unique identifier. Use this endpoint to fetch details for a single price based on the provided price ID and product ID.",
        "operationId": "get-price-by-id-for-product",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "ID of the product that needs to be used",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "description": "ID of the price that needs to be returned",
            "in": "path",
            "name": "priceId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "description": "location Id",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPriceResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "Get Price by ID for a Product",
        "tags": ["Prices"]
      },
      "put": {
        "description": "The \"Update Price by ID for a Product\" API allows modifying information for a specific price associated with a particular product using its unique identifier. Use this endpoint to update details for a single price based on the provided price ID and product ID.",
        "operationId": "update-price-by-id-for-product",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "ID of the product that needs to be used",
            "in": "path",
            "name": "productId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          },
          {
            "description": "ID of the price that needs to be returned",
            "in": "path",
            "name": "priceId",
            "required": true,
            "schema": {
              "example": "6578278e879ad2646715ba9c",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePriceDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePriceResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "Location-Access": []
          },
          {
            "Agency-Access": []
          }
        ],
        "summary": "Update Price by ID for a Product",
        "tags": ["Prices"]
      }
    }
  },
  "servers": [
    {
      "url": "https://services.leadconnectorhq.com"
    }
  ],
  "tags": [
    {
      "description": "Documentation for products API",
      "name": "Products"
    }
  ]
}

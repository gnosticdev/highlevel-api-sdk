{
  "components": {
    "schemas": {
      "AllGroupsSuccessfulResponseDTO": {
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/GroupDTO"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AppointmentCreateSchema": {
        "properties": {
          "address": {
            "description": "Appointment Address",
            "example": "Zoom",
            "type": "string"
          },
          "appointmentStatus": {
            "enum": ["new", "confirmed", "cancelled", "showed", "noshow", "invalid"],
            "example": "confirmed",
            "type": "string"
          },
          "assignedUserId": {
            "description": "Assigned User Id",
            "example": "0007BWpSzSwfiuSl0tR2",
            "type": "string"
          },
          "calendarId": {
            "description": "Calendar Id",
            "example": "CVokAlI8fgw4WYWoCtQz",
            "type": "string"
          },
          "contactId": {
            "description": "Contact Id",
            "example": "0007BWpSzSwfiuSl0tR2",
            "type": "string"
          },
          "endTime": {
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30",
            "type": "string"
          },
          "ignoreDateRange": {
            "description": "If set to true, the minimum scheduling notice and date range would be ignored",
            "example": false,
            "type": "boolean"
          },
          "ignoreFreeSlotValidation": {
            "description": "If true the time slot validation would be avoided for any appointment creation (even the ignoreDateRange)",
            "example": true,
            "type": "boolean"
          },
          "locationId": {
            "description": "Location Id",
            "example": "C2QujeCh8ZnC7al2InWR",
            "type": "string"
          },
          "meetingLocationId": {
            "default": "default",
            "description": "The unique identifier for the meeting location.\n- This value can be found in `calendar.locationConfigurations`or `calendar.teamMembers[].locationConfigurations`",
            "example": "custom_0",
            "type": "string"
          },
          "meetingLocationType": {
            "description": "Meeting location type. \n- If `address` is provided in the request body, the `meetingLocationType` defaults to **custom**.",
            "enum": ["custom", "zoom", "gmeet", "phone", "address", "ms_teams", "google"],
            "example": "custom",
            "type": "string"
          },
          "overrideLocationConfig": {
            "description": "Flag to override location config\n- **false** - If only `meetingLocationId` is provided\n- **true** - If only `meetingLocationType` is provided\n",
            "example": true,
            "type": "boolean"
          },
          "rrule": {
            "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events. DTSTART is not required, instance ids are calculated on the basis of startTime of the event. The rrule only be applied if ignoreFreeSlotValidation is true.",
            "examples": [
              "RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5",
              "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20210623T043000Z\nEXDATE:20211105T040000Z,20211105T040000Z"
            ],
            "type": "string"
          },
          "startTime": {
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30",
            "type": "string"
          },
          "title": {
            "description": "Title",
            "example": "Test Event",
            "type": "string"
          },
          "toNotify": {
            "description": "If set to false, the automations will not run",
            "example": false,
            "type": "boolean"
          }
        },
        "required": ["calendarId", "locationId", "contactId", "startTime"],
        "type": "object"
      },
      "AppointmentEditSchema": {
        "properties": {
          "address": {
            "description": "Appointment Address",
            "example": "Zoom",
            "type": "string"
          },
          "appointmentStatus": {
            "enum": ["new", "confirmed", "cancelled", "showed", "noshow", "invalid"],
            "example": "confirmed",
            "type": "string"
          },
          "assignedUserId": {
            "description": "Assigned User Id",
            "example": "0007BWpSzSwfiuSl0tR2",
            "type": "string"
          },
          "calendarId": {
            "description": "Calendar Id",
            "example": "CVokAlI8fgw4WYWoCtQz",
            "type": "string"
          },
          "endTime": {
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30",
            "type": "string"
          },
          "ignoreDateRange": {
            "description": "If set to true, the minimum scheduling notice and date range would be ignored",
            "example": false,
            "type": "boolean"
          },
          "ignoreFreeSlotValidation": {
            "description": "If true the time slot validation would be avoided for any appointment creation (even the ignoreDateRange)",
            "example": true,
            "type": "boolean"
          },
          "meetingLocationId": {
            "default": "default",
            "description": "The unique identifier for the meeting location.\n- This value can be found in `calendar.locationConfigurations`or `calendar.teamMembers[].locationConfigurations`",
            "example": "custom_0",
            "type": "string"
          },
          "meetingLocationType": {
            "description": "Meeting location type. \n- If `address` is provided in the request body, the `meetingLocationType` defaults to **custom**.",
            "enum": ["custom", "zoom", "gmeet", "phone", "address", "ms_teams", "google"],
            "example": "custom",
            "type": "string"
          },
          "overrideLocationConfig": {
            "description": "Flag to override location config\n- **false** - If only `meetingLocationId` is provided\n- **true** - If only `meetingLocationType` is provided\n",
            "example": true,
            "type": "boolean"
          },
          "rrule": {
            "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events. DTSTART is not required, instance ids are calculated on the basis of startTime of the event. The rrule only be applied if ignoreFreeSlotValidation is true.",
            "examples": [
              "RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5",
              "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20210623T043000Z\nEXDATE:20211105T040000Z,20211105T040000Z"
            ],
            "type": "string"
          },
          "startTime": {
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30",
            "type": "string"
          },
          "title": {
            "description": "Title",
            "example": "Test Event",
            "type": "string"
          },
          "toNotify": {
            "description": "If set to false, the automations will not run",
            "example": false,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AppointmentSchemaResponse": {
        "properties": {
          "address": {
            "description": "Appointment Address",
            "example": "Zoom",
            "type": "string"
          },
          "appointmentStatus": {
            "enum": ["new", "confirmed", "cancelled", "showed", "noshow", "invalid"],
            "example": "confirmed",
            "type": "string"
          },
          "assignedUserId": {
            "description": "Assigned User Id",
            "example": "0007BWpSzSwfiuSl0tR2",
            "type": "string"
          },
          "calendarId": {
            "description": "Calendar Id",
            "example": "CVokAlI8fgw4WYWoCtQz",
            "type": "string"
          },
          "contactId": {
            "description": "Contact Id",
            "example": "0007BWpSzSwfiuSl0tR2",
            "type": "string"
          },
          "endTime": {
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "example": "0TkCdp9PfvLeWKYRRvIz",
            "type": "string"
          },
          "isRecurring": {
            "description": "true if the event is recurring otherwise false",
            "example": "true",
            "type": "boolean"
          },
          "locationId": {
            "description": "Location Id",
            "example": "C2QujeCh8ZnC7al2InWR",
            "type": "string"
          },
          "meetingLocationType": {
            "default": "default",
            "description": "Meeting Location Type",
            "example": "custom",
            "type": "string"
          },
          "rrule": {
            "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events",
            "examples": [
              "RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5",
              "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20210623T043000Z\nEXDATE:20211105T040000Z,20211105T040000Z"
            ],
            "type": "string"
          },
          "startTime": {
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30",
            "type": "string"
          },
          "title": {
            "description": "Title",
            "example": "Test Event",
            "type": "string"
          }
        },
        "required": ["calendarId", "locationId", "contactId", "id"],
        "type": "object"
      },
      "Availability": {
        "properties": {
          "date": {
            "description": "Formulate the date string in the format of `<YYYY-MM-DD in local timezone>T00:00:00.000Z`.",
            "example": "2023-09-24T00:00:00.000Z",
            "type": "string"
          },
          "deleted": {
            "default": false,
            "type": "boolean"
          },
          "hours": {
            "items": {
              "$ref": "#/components/schemas/Hour"
            },
            "type": "array"
          }
        },
        "required": ["date", "hours"],
        "type": "object"
      },
      "BadRequestDTO": {
        "properties": {
          "message": {
            "example": "Bad Request",
            "type": "string"
          },
          "statusCode": {
            "example": 400,
            "type": "number"
          }
        },
        "type": "object"
      },
      "BlockSlotCreateSchema": {
        "properties": {
          "assignedUserId": {
            "description": "Assigned User Id",
            "example": "CVokAlI8fgw4WYWoCtQz",
            "type": "string"
          },
          "calendarId": {
            "description": "Calendar Id (Block Slot can only be created on simple/event calendars)",
            "example": "CVokAlI8fgw4WYWoCtQz",
            "type": "string"
          },
          "endTime": {
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30",
            "type": "string"
          },
          "locationId": {
            "description": "Location Id",
            "example": "C2QujeCh8ZnC7al2InWR",
            "type": "string"
          },
          "startTime": {
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30",
            "type": "string"
          },
          "title": {
            "description": "Title",
            "example": "Test Event",
            "type": "string"
          }
        },
        "required": ["locationId", "startTime", "endTime"],
        "type": "object"
      },
      "BlockSlotEditSchema": {
        "properties": {
          "assignedUserId": {
            "description": "Assigned User Id",
            "example": "CVokAlI8fgw4WYWoCtQz",
            "type": "string"
          },
          "calendarId": {
            "description": "Calendar Id",
            "example": "CVokAlI8fgw4WYWoCtQz",
            "type": "string"
          },
          "endTime": {
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30",
            "type": "string"
          },
          "startTime": {
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30",
            "type": "string"
          },
          "title": {
            "description": "Title",
            "example": "Test Event",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CalendarByIdSuccessfulResponseDTO": {
        "properties": {
          "calendar": {
            "$ref": "#/components/schemas/CalendarDTO"
          }
        },
        "required": ["calendar"],
        "type": "object"
      },
      "CalendarCreateDTO": {
        "properties": {
          "alertEmail": {
            "type": "string"
          },
          "allowBookingAfter": {
            "description": "Minimum scheduling notice for events",
            "type": "number"
          },
          "allowBookingAfterUnit": {
            "description": "Unit for minimum scheduling notice",
            "enum": ["hours", "days", "weeks", "months"],
            "example": "days",
            "type": "string"
          },
          "allowBookingFor": {
            "description": "Minimum number of days/weeks/months for which to allow booking events",
            "type": "number"
          },
          "allowBookingForUnit": {
            "description": "Unit for controlling the duration for which booking would be allowed for",
            "enum": ["days", "weeks", "months"],
            "example": "days",
            "type": "string"
          },
          "allowCancellation": {
            "default": true,
            "type": "boolean"
          },
          "allowReschedule": {
            "default": true,
            "type": "boolean"
          },
          "appoinmentPerDay": {
            "description": "Number of appointments that can be booked for a given day",
            "type": "number"
          },
          "appoinmentPerSlot": {
            "default": 1,
            "description": "Maximum bookings per slot (per user). Maximum seats per slot in case of Class Booking Calendar.",
            "type": "number"
          },
          "autoConfirm": {
            "default": true,
            "type": "boolean"
          },
          "availabilities": {
            "description": "This is only to set the custom availability. For standard availability, use the openHours property",
            "items": {
              "$ref": "#/components/schemas/Availability"
            },
            "type": "array"
          },
          "availabilityType": {
            "description": "Determines which availability type to consider:\n- **1**: Only custom availabilities will be used.\n- **0**: Only open hours will be used.\n- **null**: Both custom availabilities and open hours will be considered.",
            "enum": [0, 1],
            "type": "number"
          },
          "calendarCoverImage": {
            "example": "https://path-to-image.com",
            "type": "string"
          },
          "calendarType": {
            "enum": ["round_robin", "event", "class_booking", "collective", "service_booking", "personal"],
            "type": "string"
          },
          "consentLabel": {
            "type": "string"
          },
          "description": {
            "example": "this is used for testing",
            "type": "string"
          },
          "enableRecurring": {
            "default": false,
            "description": "Enable recurring appointments for the calendars. Please note that only one member should be added in the calendar to enable this",
            "type": "boolean"
          },
          "eventColor": {
            "default": "#039be5",
            "type": "string"
          },
          "eventTitle": {
            "default": "{{contact.name}}",
            "type": "string"
          },
          "eventType": {
            "default": "RoundRobin_OptimizeForAvailability",
            "enum": ["RoundRobin_OptimizeForAvailability", "RoundRobin_OptimizeForEqualDistribution"],
            "type": "string"
          },
          "formId": {
            "type": "string"
          },
          "formSubmitRedirectURL": {
            "type": "string"
          },
          "formSubmitThanksMessage": {
            "type": "string"
          },
          "formSubmitType": {
            "default": "ThankYouMessage",
            "enum": ["RedirectURL", "ThankYouMessage"],
            "type": "string"
          },
          "googleInvitationEmails": {
            "default": false,
            "type": "boolean"
          },
          "groupId": {
            "description": "Group Id",
            "example": "BqTwX8QFwXzpegMve9EQ",
            "type": "string"
          },
          "guestType": {
            "enum": ["count_only", "collect_detail"],
            "type": "string"
          },
          "isActive": {
            "default": true,
            "description": "Should the created calendar be active or draft",
            "type": "boolean"
          },
          "isLivePaymentMode": {
            "type": "boolean"
          },
          "locationConfigurations": {
            "description": "Meeting location configuration for event calendar",
            "items": {
              "$ref": "#/components/schemas/LocationConfiguration"
            },
            "type": "array"
          },
          "locationId": {
            "example": "ocQHyuzHvysMo5N5VsXc",
            "type": "string"
          },
          "lookBusyConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LookBusyConfiguration"
              }
            ],
            "description": "Look Busy Configuration"
          },
          "meetingLocation": {
            "deprecated": true,
            "description": "🚨 Deprecated! Use `locationConfigurations.location` or `teamMembers[].locationConfigurations.location` instead.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "example": "test calendar",
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "notifications": {
            "deprecated": true,
            "description": "🚨 Deprecated! Please use 'Calendar Notifications APIs' instead.",
            "items": {
              "$ref": "#/components/schemas/CalendarNotification"
            },
            "type": "array"
          },
          "openHours": {
            "description": "This is only to set the standard availability. For custom availability, use the availabilities property",
            "items": {
              "$ref": "#/components/schemas/OpenHour"
            },
            "type": "array"
          },
          "pixelId": {
            "type": "string"
          },
          "preBuffer": {
            "description": "Pre-Buffer is additional time that can be added before an appointment, allowing for extra time to get ready",
            "type": "number"
          },
          "preBufferUnit": {
            "description": "Unit for pre-buffer.",
            "enum": ["mins", "hours"],
            "type": "string"
          },
          "recurring": {
            "$ref": "#/components/schemas/Recurring"
          },
          "shouldAssignContactToTeamMember": {
            "type": "boolean"
          },
          "shouldSendAlertEmailsToAssignedMember": {
            "type": "boolean"
          },
          "shouldSkipAssigningContactForExisting": {
            "type": "boolean"
          },
          "slotBuffer": {
            "description": "Slot-Buffer is additional time that can be added after an appointment, allowing for extra time to wrap up",
            "type": "number"
          },
          "slotBufferUnit": {
            "description": "Unit for slot buffer.",
            "enum": ["mins", "hours"],
            "type": "string"
          },
          "slotDuration": {
            "default": 30,
            "description": "This controls the duration of the meeting",
            "type": "number"
          },
          "slotDurationUnit": {
            "description": "Unit for slot duration.",
            "enum": ["mins", "hours"],
            "type": "string"
          },
          "slotInterval": {
            "default": 30,
            "description": "Slot interval reflects the amount of time the between booking slots that will be shown in the calendar.",
            "type": "number"
          },
          "slotIntervalUnit": {
            "description": "Unit for slot interval.",
            "enum": ["mins", "hours"],
            "type": "string"
          },
          "slug": {
            "example": "test1",
            "type": "string"
          },
          "stickyContact": {
            "type": "boolean"
          },
          "teamMembers": {
            "description": "Team members are required for calendars of type: Round Robin, Collective, Class, Service.",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "type": "array"
          },
          "widgetSlug": {
            "example": "test1",
            "type": "string"
          },
          "widgetType": {
            "default": "classic",
            "description": "Calendar widget type. Choose \"default\" for \"neo\" and \"classic\" for \"classic\" layout.",
            "enum": ["default", "classic"],
            "example": "classic",
            "type": "string"
          }
        },
        "required": ["locationId", "name"],
        "type": "object"
      },
      "CalendarDTO": {
        "properties": {
          "alertEmail": {
            "type": "string"
          },
          "allowBookingAfter": {
            "description": "Minimum scheduling notice for events",
            "type": "number"
          },
          "allowBookingAfterUnit": {
            "description": "Unit for minimum scheduling notice",
            "enum": ["hours", "days", "weeks", "months"],
            "example": "days",
            "type": "string"
          },
          "allowBookingFor": {
            "description": "Minimum number of days/weeks/months for which to allow booking events",
            "type": "number"
          },
          "allowBookingForUnit": {
            "description": "Unit for controlling the duration for which booking would be allowed for",
            "enum": ["days", "weeks", "months"],
            "example": "days",
            "type": "string"
          },
          "allowCancellation": {
            "default": true,
            "type": "boolean"
          },
          "allowReschedule": {
            "default": true,
            "type": "boolean"
          },
          "appoinmentPerDay": {
            "description": "Number of appointments that can be booked for a given day",
            "type": "number"
          },
          "appoinmentPerSlot": {
            "default": 1,
            "description": "Maximum bookings per slot (per user). Maximum seats per slot in case of Class Booking Calendar.",
            "type": "number"
          },
          "autoConfirm": {
            "default": true,
            "type": "boolean"
          },
          "availabilities": {
            "description": "This is only to set the custom availability. For standard availability, use the openHours property",
            "items": {
              "$ref": "#/components/schemas/Availability"
            },
            "type": "array"
          },
          "availabilityType": {
            "description": "Determines which availability type to consider:\n- **1**: Only custom availabilities will be used.\n- **0**: Only open hours will be used.\n- **null**: Both custom availabilities and open hours will be considered.",
            "enum": [0, 1],
            "type": "number"
          },
          "calendarCoverImage": {
            "example": "https://path-to-image.com",
            "type": "string"
          },
          "calendarType": {
            "enum": ["round_robin", "event", "class_booking", "collective", "service_booking", "personal"],
            "type": "string"
          },
          "consentLabel": {
            "type": "string"
          },
          "description": {
            "example": "this is used for testing",
            "type": "string"
          },
          "enableRecurring": {
            "default": false,
            "description": "Enable recurring appointments for the calendars. Please note that only one member should be added in the calendar to enable this",
            "type": "boolean"
          },
          "eventColor": {
            "default": "#039be5",
            "type": "string"
          },
          "eventTitle": {
            "default": "{{contact.name}}",
            "type": "string"
          },
          "eventType": {
            "default": "RoundRobin_OptimizeForAvailability",
            "enum": ["RoundRobin_OptimizeForAvailability", "RoundRobin_OptimizeForEqualDistribution"],
            "type": "string"
          },
          "formId": {
            "type": "string"
          },
          "formSubmitRedirectURL": {
            "type": "string"
          },
          "formSubmitThanksMessage": {
            "type": "string"
          },
          "formSubmitType": {
            "default": "ThankYouMessage",
            "enum": ["RedirectURL", "ThankYouMessage"],
            "type": "string"
          },
          "googleInvitationEmails": {
            "default": false,
            "type": "boolean"
          },
          "groupId": {
            "description": "Group Id",
            "example": "BqTwX8QFwXzpegMve9EQ",
            "type": "string"
          },
          "guestType": {
            "enum": ["count_only", "collect_detail"],
            "type": "string"
          },
          "id": {
            "example": "0TkCdp9PfvLeWKYRRvIz",
            "type": "string"
          },
          "isActive": {
            "default": true,
            "description": "Should the created calendar be active or draft",
            "type": "boolean"
          },
          "isLivePaymentMode": {
            "type": "boolean"
          },
          "locationConfigurations": {
            "description": "Meeting location configuration for event calendar",
            "items": {
              "$ref": "#/components/schemas/LocationConfigurationResponse"
            },
            "type": "array"
          },
          "locationId": {
            "example": "ocQHyuzHvysMo5N5VsXc",
            "type": "string"
          },
          "lookBusyConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LookBusyConfiguration"
              }
            ],
            "description": "Look Busy Configuration"
          },
          "meetingLocation": {
            "deprecated": true,
            "description": "🚨 Deprecated! Use `locationConfigurations.location` or `teamMembers[].locationConfigurations.location` instead.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "example": "test calendar",
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "notifications": {
            "deprecated": true,
            "description": "🚨 Deprecated! Please use 'Calendar Notifications APIs' instead.",
            "items": {
              "$ref": "#/components/schemas/CalendarNotification"
            },
            "type": "array"
          },
          "openHours": {
            "description": "This is only to set the standard availability. For custom availability, use the availabilities property",
            "items": {
              "$ref": "#/components/schemas/OpenHour"
            },
            "type": "array"
          },
          "pixelId": {
            "type": "string"
          },
          "preBuffer": {
            "description": "Pre-Buffer is additional time that can be added before an appointment, allowing for extra time to get ready",
            "type": "number"
          },
          "preBufferUnit": {
            "description": "Unit for pre-buffer.",
            "enum": ["mins", "hours"],
            "type": "string"
          },
          "recurring": {
            "$ref": "#/components/schemas/Recurring"
          },
          "shouldAssignContactToTeamMember": {
            "type": "boolean"
          },
          "shouldSendAlertEmailsToAssignedMember": {
            "type": "boolean"
          },
          "shouldSkipAssigningContactForExisting": {
            "type": "boolean"
          },
          "slotBuffer": {
            "description": "Slot-Buffer is additional time that can be added after an appointment, allowing for extra time to wrap up",
            "type": "number"
          },
          "slotBufferUnit": {
            "description": "Unit for slot buffer.",
            "enum": ["mins", "hours"],
            "type": "string"
          },
          "slotDuration": {
            "default": 30,
            "description": "This controls the duration of the meeting",
            "type": "number"
          },
          "slotDurationUnit": {
            "description": "Unit for slot duration.",
            "enum": ["mins", "hours"],
            "type": "string"
          },
          "slotInterval": {
            "default": 30,
            "description": "Slot interval reflects the amount of time the between booking slots that will be shown in the calendar.",
            "type": "number"
          },
          "slotIntervalUnit": {
            "description": "Unit for slot interval.",
            "enum": ["mins", "hours"],
            "type": "string"
          },
          "slug": {
            "example": "test1",
            "type": "string"
          },
          "stickyContact": {
            "type": "boolean"
          },
          "teamMembers": {
            "description": "Team members are for calendars of type: Round Robin, Collective, Class, Service.",
            "items": {
              "$ref": "#/components/schemas/TeamMemberResponse"
            },
            "type": "array"
          },
          "widgetSlug": {
            "example": "test1",
            "type": "string"
          },
          "widgetType": {
            "default": "classic",
            "description": "Calendar widget type. Choose \"default\" for \"neo\" and \"classic\" for \"classic\" layout.",
            "enum": ["default", "classic"],
            "example": "classic",
            "type": "string"
          }
        },
        "required": ["locationId", "name", "id"],
        "type": "object"
      },
      "CalendarDeleteSuccessfulResponseDTO": {
        "properties": {
          "success": {
            "description": "Success",
            "example": "true",
            "type": "boolean"
          }
        },
        "required": ["success"],
        "type": "object"
      },
      "CalendarEventDTO": {
        "properties": {
          "address": {
            "description": "Calendar Event address",
            "example": "https://meet.google.com/yqp-gogr-wve",
            "type": "string"
          },
          "appointmentStatus": {
            "description": "Appointment Status",
            "example": "confirmed",
            "type": "string"
          },
          "assignedResources": {
            "description": "Ids of associated resources rooms and/or equipments",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "assignedUserId": {
            "description": "AssignedUser - the primary owner of an appointment",
            "example": "YlWd2wuCAZQzh2cH1fVZ",
            "type": "string"
          },
          "calendarId": {
            "description": "Calendar ID",
            "example": "BqTwX8QFwXzpegMve9EQ",
            "type": "string"
          },
          "contactId": {
            "description": "Contact ID",
            "example": "9NkT25Vor1v4aQatFsv2",
            "type": "string"
          },
          "createdBy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedOrUpdatedBy"
              }
            ],
            "description": "Appointment booked by metadata"
          },
          "dateAdded": {
            "description": "Date Added",
            "example": "2023-09-25T16:00:00+05:30",
            "type": "object"
          },
          "dateUpdated": {
            "description": "Date Updated",
            "example": "2023-09-25T16:00:00+05:30",
            "type": "object"
          },
          "endTime": {
            "description": "End Time",
            "example": "2023-09-25T16:00:00+05:30",
            "type": "object"
          },
          "groupId": {
            "description": "Group ID",
            "example": "9NkT25Vor1v4aQatFsv2",
            "type": "string"
          },
          "id": {
            "description": "Event Id or Instance id for a recurring event",
            "examples": ["ocQHyuzHvysMo5N5VsXc", "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"],
            "type": "string"
          },
          "isRecurring": {
            "description": "true if the event is recurring otherwise false",
            "example": "true",
            "type": "boolean"
          },
          "locationId": {
            "description": "Location ID",
            "example": "0007BWpSzSwfiuSl0tR2",
            "type": "string"
          },
          "masterEventId": {
            "description": "Master event id for a recurring instance",
            "example": "ocWd2wuBGAQzh2cH1fSZ",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "example": "Some dummy note",
            "type": "string"
          },
          "rrule": {
            "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events. DTSTART is not required, instance ids are calculated on the basis of startTime of the event.",
            "examples": [
              "RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5",
              "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20210623T043000Z\nEXDATE:20211105T040000Z,20211105T040000Z"
            ],
            "type": "string"
          },
          "startTime": {
            "description": "Start Time",
            "example": "2023-09-25T16:00:00+05:30",
            "type": "object"
          },
          "title": {
            "description": "Calendar Event title",
            "example": "Appointment with GHL Dev team",
            "type": "string"
          },
          "users": {
            "description": "Users - the secondary owners of an appointment.",
            "example": ["YlWd2wuCAZQzh2cH1fVZ", "9NkT25Vor1v4aQatFsv2"],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "title",
          "calendarId",
          "locationId",
          "contactId",
          "groupId",
          "appointmentStatus",
          "assignedUserId",
          "users",
          "startTime",
          "endTime",
          "dateAdded",
          "dateUpdated"
        ],
        "type": "object"
      },
      "CalendarNotification": {
        "properties": {
          "selectedUsers": {
            "description": "Comma separated emails",
            "example": "user1@testemail.com,user2@testemail.com",
            "type": "string"
          },
          "shouldSendToContact": {
            "type": "boolean"
          },
          "shouldSendToGuest": {
            "type": "boolean"
          },
          "shouldSendToSelectedUsers": {
            "type": "boolean"
          },
          "shouldSendToUser": {
            "type": "boolean"
          },
          "type": {
            "default": "email",
            "description": "Calendar Notification",
            "enum": ["email"],
            "example": "email",
            "type": "string"
          }
        },
        "required": [
          "shouldSendToContact",
          "shouldSendToGuest",
          "shouldSendToUser",
          "shouldSendToSelectedUsers",
          "selectedUsers"
        ],
        "type": "object"
      },
      "CalendarNotificationDeleteResponseDTO": {
        "properties": {
          "message": {
            "description": "Result of delete/update operation",
            "type": "string"
          }
        },
        "required": ["message"],
        "type": "object"
      },
      "CalendarNotificationResponseDTO": {
        "properties": {
          "_id": {
            "description": "Notification ID",
            "type": "string"
          },
          "additionalEmailIds": {
            "example": ["example1@email.com", "example2@email.com"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "afterTime": {
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "type": "array"
          },
          "altType": {
            "enum": ["calendar"],
            "example": "calendar",
            "type": "string"
          },
          "beforeTime": {
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "type": "array"
          },
          "body": {
            "example": "This is a test notification",
            "type": "string"
          },
          "calendarId": {
            "example": "0as9d8as0d",
            "type": "string"
          },
          "channel": {
            "enum": ["email", "inApp"],
            "example": "email",
            "type": "string"
          },
          "deleted": {
            "example": false,
            "type": "boolean"
          },
          "isActive": {
            "example": true,
            "type": "boolean"
          },
          "notificationType": {
            "enum": ["booked", "confirmation", "cancellation", "reminder", "followup", "reschedule"],
            "example": "confirmation",
            "type": "string"
          },
          "receiverType": {
            "enum": ["contact", "guest", "assignedUser", "emails"],
            "example": "contact",
            "type": "string"
          },
          "selectedUsers": {
            "example": ["user1", "user2"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subject": {
            "example": "Test Notification",
            "type": "string"
          },
          "templateId": {
            "example": "0as9d8as0d",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CalendarResourceByIdResponseDTO": {
        "properties": {
          "calendarIds": {
            "description": "Calendar IDs",
            "example": ["Jsj0xnlDDjw0SuvX1J13", "oCM5feFC86FAAbcO7lJK"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "capacity": {
            "description": "Capacity of the resource",
            "example": 85,
            "type": "number"
          },
          "description": {
            "description": "Description of the resource",
            "type": "string"
          },
          "isActive": {
            "description": "Whether the resource is active",
            "type": "boolean"
          },
          "locationId": {
            "description": "Location ID of the resource",
            "type": "string"
          },
          "name": {
            "description": "Name of the resource",
            "example": "yoga room",
            "type": "string"
          },
          "outOfService": {
            "description": "Indicates if the resource is out of service",
            "example": 0,
            "type": "number"
          },
          "quantity": {
            "description": "Quantity of the resource",
            "type": "number"
          },
          "resourceType": {
            "enum": ["equipments", "rooms"],
            "type": "string"
          }
        },
        "required": ["locationId", "name", "resourceType", "isActive", "calendarIds"],
        "type": "object"
      },
      "CalendarResourceResponseDTO": {
        "properties": {
          "capacity": {
            "description": "Capacity of the resource",
            "example": 85,
            "type": "number"
          },
          "description": {
            "description": "Description of the resource",
            "type": "string"
          },
          "isActive": {
            "description": "Whether the resource is active",
            "type": "boolean"
          },
          "locationId": {
            "description": "Location ID of the resource",
            "type": "string"
          },
          "name": {
            "description": "Name of the resource",
            "example": "yoga room",
            "type": "string"
          },
          "outOfService": {
            "description": "Indicates if the resource is out of service",
            "example": 0,
            "type": "number"
          },
          "quantity": {
            "description": "Quantity of the resource",
            "type": "number"
          },
          "resourceType": {
            "enum": ["equipments", "rooms"],
            "type": "string"
          }
        },
        "required": ["locationId", "name", "resourceType", "isActive"],
        "type": "object"
      },
      "CalendarUpdateDTO": {
        "properties": {
          "alertEmail": {
            "type": "string"
          },
          "allowBookingAfter": {
            "description": "Minimum scheduling notice for events",
            "type": "number"
          },
          "allowBookingAfterUnit": {
            "description": "Unit for minimum scheduling notice",
            "enum": ["hours", "days", "weeks", "months"],
            "example": "days",
            "type": "string"
          },
          "allowBookingFor": {
            "description": "Minimum number of days/weeks/months for which to allow booking events",
            "type": "number"
          },
          "allowBookingForUnit": {
            "description": "Unit for controlling the duration for which booking would be allowed for",
            "enum": ["days", "weeks", "months"],
            "example": "days",
            "type": "string"
          },
          "allowCancellation": {
            "type": "boolean"
          },
          "allowReschedule": {
            "type": "boolean"
          },
          "appoinmentPerDay": {
            "description": "Number of appointments that can be booked for a given day",
            "type": "number"
          },
          "appoinmentPerSlot": {
            "type": "number"
          },
          "autoConfirm": {
            "type": "boolean"
          },
          "availabilities": {
            "description": "This is only to set the custom availability. For standard availability, use the openHours property",
            "items": {
              "$ref": "#/components/schemas/UpdateAvailability"
            },
            "type": "array"
          },
          "availabilityType": {
            "description": "Determines which availability type to consider:\n- **1**: Only custom availabilities will be used.\n- **0**: Only open hours will be used.\n- **null**: Both the custom availabilities and open hours will be considered.",
            "enum": [0, 1],
            "type": "number"
          },
          "calendarCoverImage": {
            "type": "string"
          },
          "consentLabel": {
            "type": "string"
          },
          "description": {
            "example": "this is used for testing",
            "type": "string"
          },
          "enableRecurring": {
            "default": false,
            "description": "Enable recurring appointments for the calendars. Please note that only one member should be added in the calendar to enable this",
            "type": "boolean"
          },
          "eventColor": {
            "default": "#039be5",
            "type": "string"
          },
          "eventTitle": {
            "type": "string"
          },
          "eventType": {
            "enum": ["RoundRobin_OptimizeForAvailability", "RoundRobin_OptimizeForEqualDistribution"],
            "type": "string"
          },
          "formId": {
            "type": "string"
          },
          "formSubmitRedirectURL": {
            "type": "string"
          },
          "formSubmitThanksMessage": {
            "type": "string"
          },
          "formSubmitType": {
            "default": "ThankYouMessage",
            "enum": ["RedirectURL", "ThankYouMessage"],
            "type": "string"
          },
          "googleInvitationEmails": {
            "type": "boolean"
          },
          "groupId": {
            "description": "Group Id",
            "example": "BqTwX8QFwXzpegMve9EQ",
            "type": "string"
          },
          "guestType": {
            "enum": ["count_only", "collect_detail"],
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "isLivePaymentMode": {
            "type": "boolean"
          },
          "locationConfigurations": {
            "description": "Meeting location configuration for event calendar",
            "items": {
              "$ref": "#/components/schemas/LocationConfiguration"
            },
            "type": "array"
          },
          "lookBusyConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LookBusyConfiguration"
              }
            ],
            "description": "Look Busy Configuration"
          },
          "meetingLocation": {
            "deprecated": true,
            "description": "🚨 Deprecated! Use `locationConfigurations.location` or `teamMembers[].locationConfigurations.location` instead.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "example": "test calendar",
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "notifications": {
            "deprecated": true,
            "description": "🚨 Deprecated! Please use 'Calendar Notifications APIs' instead.",
            "items": {
              "$ref": "#/components/schemas/CalendarNotification"
            },
            "type": "array"
          },
          "openHours": {
            "items": {
              "$ref": "#/components/schemas/OpenHour"
            },
            "type": "array"
          },
          "pixelId": {
            "type": "string"
          },
          "preBuffer": {
            "description": "Pre-Buffer is additional time that can be added before an appointment, allowing for extra time to get ready",
            "type": "number"
          },
          "preBufferUnit": {
            "description": "Unit for pre-buffer.",
            "enum": ["mins", "hours"],
            "type": "string"
          },
          "recurring": {
            "$ref": "#/components/schemas/Recurring"
          },
          "shouldAssignContactToTeamMember": {
            "type": "boolean"
          },
          "shouldSendAlertEmailsToAssignedMember": {
            "type": "boolean"
          },
          "shouldSkipAssigningContactForExisting": {
            "type": "boolean"
          },
          "slotBuffer": {
            "description": "Slot-Buffer is additional time that can be added after an appointment, allowing for extra time to wrap up",
            "type": "number"
          },
          "slotDuration": {
            "default": 30,
            "description": "This controls the duration of the meeting",
            "type": "number"
          },
          "slotDurationUnit": {
            "description": "Unit for slot duration.",
            "enum": ["mins", "hours"],
            "type": "string"
          },
          "slotInterval": {
            "default": 30,
            "description": "Slot interval reflects the amount of time the between booking slots that will be shown in the calendar.",
            "type": "number"
          },
          "slotIntervalUnit": {
            "description": "Unit for slot interval.",
            "enum": ["mins", "hours"],
            "type": "string"
          },
          "slug": {
            "example": "test1",
            "type": "string"
          },
          "stickyContact": {
            "type": "boolean"
          },
          "teamMembers": {
            "description": "Team members",
            "items": {
              "$ref": "#/components/schemas/TeamMember"
            },
            "type": "array"
          },
          "widgetSlug": {
            "example": "test1",
            "type": "string"
          },
          "widgetType": {
            "default": "classic",
            "description": "Calendar widget type. Choose \"default\" for \"neo\" and \"classic\" for \"classic\" layout.",
            "enum": ["default", "classic"],
            "example": "classic",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CalendarsGetSuccessfulResponseDTO": {
        "properties": {
          "calendars": {
            "items": {
              "$ref": "#/components/schemas/CalendarDTO"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CreateBookedSlotSuccessfulResponseDto": {
        "properties": {
          "assignedUserId": {
            "description": "Assigned User Id",
            "example": "0007BWpSzSwfiuSl0tR2",
            "type": "string"
          },
          "calendarId": {
            "description": "Calendar id",
            "example": "CVokAlI8fgw4WYWoCtQz",
            "type": "string"
          },
          "endTime": {
            "description": "End Time",
            "example": "2021-06-23T04:30:00+05:30",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "example": "0TkCdp9PfvLeWKYRRvIz",
            "type": "string"
          },
          "locationId": {
            "description": "Location Id",
            "example": "C2QujeCh8ZnC7al2InWR",
            "type": "string"
          },
          "startTime": {
            "description": "Start Time",
            "example": "2021-06-23T03:30:00+05:30",
            "type": "string"
          },
          "title": {
            "description": "Title",
            "example": "My event",
            "type": "string"
          }
        },
        "required": ["id", "locationId", "title", "startTime", "endTime"],
        "type": "object"
      },
      "CreateCalendarNotificationDTO": {
        "properties": {
          "additionalEmailIds": {
            "description": "Additional email addresses to receive notifications.",
            "example": ["example1@email.com", "example2@email.com"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "afterTime": {
            "description": "Specifies the time after which the follow-up notification should be sent. This is not required for other notification types.",
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "type": "array"
          },
          "beforeTime": {
            "description": "Specifies the time before which the reminder notification should be sent. This is not required for other notification types.",
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "type": "array"
          },
          "body": {
            "description": "Body  for email notification. Not necessary for in-App notification",
            "type": "string"
          },
          "channel": {
            "description": "Notification channel",
            "enum": ["email", "inApp"],
            "type": "string"
          },
          "fromAddress": {
            "description": "from address for email notification",
            "type": "string"
          },
          "fromName": {
            "description": "from name for email notification",
            "type": "string"
          },
          "isActive": {
            "default": true,
            "description": "Is the notification active",
            "type": "boolean"
          },
          "notificationType": {
            "description": "Notification type",
            "enum": ["booked", "confirmation", "cancellation", "reminder", "followup", "reschedule"],
            "type": "string"
          },
          "receiverType": {
            "description": "notification recipient type",
            "enum": ["contact", "guest", "assignedUser", "emails"],
            "type": "string"
          },
          "selectedUsers": {
            "description": "selected user for in-App notification",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subject": {
            "description": "Subject  for email notification. Not necessary for in-App notification",
            "type": "string"
          },
          "templateId": {
            "description": "Template ID for email notification. Not necessary for in-App notification",
            "type": "string"
          }
        },
        "required": ["receiverType", "channel", "notificationType"],
        "type": "object"
      },
      "CreateCalendarResourceDTO": {
        "properties": {
          "calendarIds": {
            "description": "Service calendar IDs to be mapped with the resource.\n\n    One equipment can only be mapped with one service calendar.\n    \nOne room can be mapped with multiple service calendars.",
            "items": {
              "type": "string"
            },
            "maxItems": 100,
            "type": "array"
          },
          "capacity": {
            "description": "Capacity of the room.",
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "locationId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "outOfService": {
            "description": "Quantity of the out of service equipment.",
            "type": "number"
          },
          "quantity": {
            "description": "Quantity of the equipment.",
            "type": "number"
          }
        },
        "required": ["locationId", "name", "description", "quantity", "outOfService", "capacity", "calendarIds"],
        "type": "object"
      },
      "CreatedOrUpdatedBy": {
        "properties": {
          "source": {
            "description": "The source of the appointment",
            "type": "string"
          },
          "userId": {
            "description": "The ID of the user who created or updated the appointment",
            "type": "string"
          }
        },
        "required": ["source"],
        "type": "object"
      },
      "DeleteAppointmentSchema": {
        "properties": {},
        "type": "object"
      },
      "DeleteEventSuccessfulResponseDto": {
        "properties": {
          "succeeded": {
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DeleteNoteSuccessfulResponseDto": {
        "properties": {
          "success": {
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GetCalendarEventSuccessfulResponseDTO": {
        "properties": {
          "event": {
            "$ref": "#/components/schemas/CalendarEventDTO"
          }
        },
        "type": "object"
      },
      "GetCalendarEventsSuccessfulResponseDTO": {
        "properties": {
          "events": {
            "items": {
              "$ref": "#/components/schemas/CalendarEventDTO"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetCreateUpdateNoteSuccessfulResponseDto": {
        "properties": {
          "note": {
            "$ref": "#/components/schemas/GetNoteSchema"
          }
        },
        "type": "object"
      },
      "GetNoteSchema": {
        "properties": {
          "body": {
            "example": "lorem ipsum",
            "type": "string"
          },
          "contactId": {
            "example": "TUcmRxWrjqzJS8EjkxNK",
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/NoteCreatedBySchema"
          },
          "dateAdded": {
            "example": "2021-07-08T12:02:11.285Z",
            "type": "string"
          },
          "id": {
            "example": "HGPcayliwcdoUFzvbTok",
            "type": "string"
          },
          "userId": {
            "example": "TUcmRxWrjqzJS8EjkxNK",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetNotesListSuccessfulResponseDto": {
        "properties": {
          "hasMore": {
            "example": true,
            "type": "boolean"
          },
          "notes": {
            "items": {
              "$ref": "#/components/schemas/GetNoteSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetSlotsSuccessfulResponseDto": {
        "properties": {
          "_dates_": {
            "$ref": "#/components/schemas/SlotsSchema"
          }
        },
        "required": ["_dates_"],
        "type": "object"
      },
      "GroupCreateDTO": {
        "properties": {
          "description": {
            "example": "group description",
            "type": "string"
          },
          "isActive": {
            "example": true,
            "type": "boolean"
          },
          "locationId": {
            "example": "ocQHyuzHvysMo5N5VsXc",
            "type": "string"
          },
          "name": {
            "example": "group a",
            "type": "string"
          },
          "slug": {
            "example": "15-mins",
            "type": "string"
          }
        },
        "required": ["locationId", "name", "description", "slug"],
        "type": "object"
      },
      "GroupCreateSuccessfulResponseDTO": {
        "properties": {
          "group": {
            "$ref": "#/components/schemas/GroupDTO"
          }
        },
        "type": "object"
      },
      "GroupDTO": {
        "properties": {
          "description": {
            "example": "group description",
            "type": "string"
          },
          "id": {
            "example": "ocQHyuzHvysMo5N5VsXc",
            "type": "string"
          },
          "isActive": {
            "example": true,
            "type": "boolean"
          },
          "locationId": {
            "example": "ocQHyuzHvysMo5N5VsXc",
            "type": "string"
          },
          "name": {
            "example": "group a",
            "type": "string"
          },
          "slug": {
            "example": "15-mins",
            "type": "string"
          }
        },
        "required": ["locationId", "name", "description", "slug"],
        "type": "object"
      },
      "GroupStatusUpdateParams": {
        "properties": {
          "isActive": {
            "description": "Is Active?",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["isActive"],
        "type": "object"
      },
      "GroupSuccessfulResponseDTO": {
        "properties": {
          "success": {
            "description": "Success",
            "example": "true",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GroupUpdateDTO": {
        "properties": {
          "description": {
            "example": "group description",
            "type": "string"
          },
          "name": {
            "example": "group a",
            "type": "string"
          },
          "slug": {
            "example": "15-mins",
            "type": "string"
          }
        },
        "required": ["name", "description", "slug"],
        "type": "object"
      },
      "Hour": {
        "properties": {
          "closeHour": {
            "maximum": 23,
            "minimum": 0,
            "type": "number"
          },
          "closeMinute": {
            "maximum": 60,
            "minimum": 0,
            "type": "number"
          },
          "openHour": {
            "maximum": 23,
            "minimum": 0,
            "type": "number"
          },
          "openMinute": {
            "maximum": 60,
            "minimum": 0,
            "type": "number"
          }
        },
        "required": ["openHour", "openMinute", "closeHour", "closeMinute"],
        "type": "object"
      },
      "LocationConfiguration": {
        "properties": {
          "kind": {
            "description": "Type of meeting location. zoom_conference/google_conference/ms_teams_conference is not supported in event calendar type",
            "enum": [
              "custom",
              "zoom_conference",
              "google_conference",
              "inbound_call",
              "outbound_call",
              "physical",
              "booker",
              "ms_teams_conference"
            ],
            "example": "custom",
            "type": "string"
          },
          "location": {
            "description": "Address for meeting location. Not applicable on \"zoom_conference\", \"google_conference\" and \"ms_teams_conference\" kind",
            "examples": ["+14455550132", "http://meet.google.com/your-meeting-location"],
            "type": "string"
          }
        },
        "required": ["kind"],
        "type": "object"
      },
      "LocationConfigurationResponse": {
        "properties": {
          "kind": {
            "description": "Type of meeting location. zoom_conference/google_conference/ms_teams_conference is not supported in event calendar type",
            "enum": [
              "custom",
              "zoom_conference",
              "google_conference",
              "inbound_call",
              "outbound_call",
              "physical",
              "booker",
              "ms_teams_conference"
            ],
            "example": "custom",
            "type": "string"
          },
          "location": {
            "description": "Address for meeting location. Not applicable on \"zoom_conference\", \"google_conference\" and \"ms_teams_conference\" kind",
            "examples": ["+14455550132", "http://meet.google.com/your-meeting-location"],
            "type": "string"
          },
          "meetingId": {
            "description": "Unique ID used to select a specific meeting location",
            "example": "my_conference_id",
            "type": "string"
          }
        },
        "required": ["kind"],
        "type": "object"
      },
      "LookBusyConfiguration": {
        "properties": {
          "LookBusyPercentage": {
            "description": "Percentage of slots that will be hidden",
            "type": "number"
          },
          "enabled": {
            "default": false,
            "description": "Apply Look Busy",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["enabled", "LookBusyPercentage"],
        "type": "object"
      },
      "NoteCreatedBySchema": {
        "properties": {
          "id": {
            "example": "TUcmRxWr",
            "type": "string"
          },
          "name": {
            "example": "John Doe",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotesDTO": {
        "properties": {
          "body": {
            "description": "Note body",
            "example": "lorem ipsum",
            "maxLength": 5000,
            "type": "string"
          },
          "userId": {
            "example": "GCs5KuzPqTls7vWclkEV",
            "type": "string"
          }
        },
        "required": ["body"],
        "type": "object"
      },
      "OpenHour": {
        "properties": {
          "daysOfTheWeek": {
            "items": {
              "maximum": 6,
              "minimum": 0,
              "type": "number"
            },
            "type": "array"
          },
          "hours": {
            "items": {
              "$ref": "#/components/schemas/Hour"
            },
            "type": "array"
          }
        },
        "required": ["daysOfTheWeek", "hours"],
        "type": "object"
      },
      "Recurring": {
        "properties": {
          "bookingOption": {
            "description": "This setting contols what to do incase a recurring slot is unavailable",
            "enum": ["skip", "continue", "book_next"],
            "type": "string"
          },
          "bookingOverlapDefaultStatus": {
            "description": "This setting contols what to do incase a recurring slot is unavailable",
            "enum": ["confirmed", "new"],
            "type": "string"
          },
          "count": {
            "description": "Number of recurrences",
            "maximum": 24,
            "type": "number"
          },
          "freq": {
            "enum": ["DAILY", "WEEKLY", "MONTHLY"],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceDeleteResponseDTO": {
        "properties": {
          "success": {
            "description": "Success",
            "example": "true",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SchedulesDTO": {
        "properties": {
          "timeOffset": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "SlotsSchema": {
        "properties": {
          "slots": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["slots"],
        "type": "object"
      },
      "TeamMember": {
        "properties": {
          "isPrimary": {
            "description": "Marks a user as primary. This property is required in case of collective booking calendars. Only one user can be primary.",
            "type": "boolean"
          },
          "locationConfigurations": {
            "description": "Meeting location configuration for event calendar.\n- *Multiple locations are allowed only when one team member is selected.*\n- *For **Class booking** and **Collective** calendars, only one location configuration is allowed for each team member.*",
            "items": {
              "$ref": "#/components/schemas/LocationConfiguration"
            },
            "type": "array"
          },
          "meetingLocation": {
            "deprecated": true,
            "description": "🚨 Deprecated! Use `locationConfigurations.location` instead.",
            "readOnly": true,
            "type": "string"
          },
          "meetingLocationType": {
            "default": "custom",
            "deprecated": true,
            "description": "🚨 Deprecated! Use `locationConfigurations.kind` instead.",
            "enum": ["custom", "zoom", "gmeet", "phone", "address", "teams", "booker"],
            "example": "custom",
            "readOnly": true,
            "type": "string"
          },
          "priority": {
            "default": 0.5,
            "enum": [0, 0.5, 1],
            "type": "number"
          },
          "userId": {
            "example": "ocQHyuzHvysMo5N5VsXc",
            "type": "string"
          }
        },
        "required": ["userId"],
        "type": "object"
      },
      "TeamMemberResponse": {
        "properties": {
          "isPrimary": {
            "description": "Marks a user as primary. This property is required in case of collective booking calendars. Only one user can be primary.",
            "type": "boolean"
          },
          "locationConfigurations": {
            "description": "Meeting location configurations",
            "items": {
              "$ref": "#/components/schemas/LocationConfigurationResponse"
            },
            "type": "array"
          },
          "meetingLocation": {
            "deprecated": true,
            "description": "🚨 Deprecated! Use `locationConfigurations.location` instead.",
            "readOnly": true,
            "type": "string"
          },
          "meetingLocationType": {
            "default": "custom",
            "deprecated": true,
            "description": "🚨 Deprecated! Use `locationConfigurations.kind` instead.",
            "enum": ["custom", "zoom", "gmeet", "phone", "address", "teams", "booker"],
            "example": "custom",
            "readOnly": true,
            "type": "string"
          },
          "priority": {
            "default": 0.5,
            "enum": [0, 0.5, 1],
            "type": "number"
          },
          "userId": {
            "example": "ocQHyuzHvysMo5N5VsXc",
            "type": "string"
          }
        },
        "required": ["userId"],
        "type": "object"
      },
      "UnauthorizedDTO": {
        "properties": {
          "error": {
            "example": "Unauthorized",
            "type": "string"
          },
          "message": {
            "example": "Invalid token: access token is invalid",
            "type": "string"
          },
          "statusCode": {
            "example": 401,
            "type": "number"
          }
        },
        "type": "object"
      },
      "UpdateAvailability": {
        "properties": {
          "date": {
            "description": "Formulate the date string in the format of `<YYYY-MM-DD in local timezone>T00:00:00.000Z`.",
            "example": "2023-09-24T00:00:00.000Z",
            "type": "string"
          },
          "deleted": {
            "default": false,
            "type": "boolean"
          },
          "hours": {
            "items": {
              "$ref": "#/components/schemas/Hour"
            },
            "type": "array"
          },
          "id": {
            "description": "The ID of the custom availability object. It is required while updating or deleting the existing custom date availability",
            "type": "string"
          }
        },
        "required": ["date", "hours"],
        "type": "object"
      },
      "UpdateCalendarNotificationsDTO": {
        "properties": {
          "additionalEmailIds": {
            "description": "Additional email addresses to receive notifications.",
            "example": ["example1@email.com", "example2@email.com"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "afterTime": {
            "description": "Specifies the time after which the follow-up notification should be sent.",
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "type": "array"
          },
          "altId": {
            "description": "Specifies the ID of the model associated with the notification. This can be extended to support additional models in the future.",
            "example": "D7JP6b67AgWqTtfGaQcw",
            "type": "string"
          },
          "altType": {
            "default": "calendar",
            "description": "Specifies the model associated with the notification. This can be extended to support additional models in the future. For now only Calendars is supported",
            "enum": ["calendar"],
            "type": "string"
          },
          "beforeTime": {
            "description": "Specifies the time before which the reminder notification should be sent.",
            "example": [
              {
                "timeOffset": 1,
                "unit": "hours"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/SchedulesDTO"
            },
            "type": "array"
          },
          "body": {
            "description": "Body  for email notification. Not necessary for in-App notification",
            "type": "string"
          },
          "channel": {
            "description": "Notification channel",
            "enum": ["email", "inApp"],
            "type": "string"
          },
          "deleted": {
            "default": false,
            "description": "Marks the notification as deleted (soft delete)",
            "type": "boolean"
          },
          "fromAddress": {
            "description": "From address for email notification",
            "type": "string"
          },
          "fromName": {
            "description": "From name for email notification",
            "type": "string"
          },
          "isActive": {
            "default": true,
            "description": "Is the notification active",
            "type": "boolean"
          },
          "notificationType": {
            "description": "Notification type",
            "enum": ["booked", "confirmation", "cancellation", "reminder", "followup", "reschedule"],
            "type": "string"
          },
          "receiverType": {
            "description": "Notification recipient type",
            "enum": ["contact", "guest", "assignedUser", "emails"],
            "type": "string"
          },
          "subject": {
            "description": "Subject  for email notification. Not necessary for in-App notification",
            "type": "string"
          },
          "templateId": {
            "description": "Template ID for email notification",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateCalendarResourceDTO": {
        "properties": {
          "calendarIds": {
            "description": "Service calendar IDs to be mapped with the resource.\n\n    One equipment can only be mapped with one service calendar.\n    \nOne room can be mapped with multiple service calendars.",
            "items": {
              "type": "string"
            },
            "maxItems": 100,
            "type": "array"
          },
          "capacity": {
            "description": "Capacity of the room.",
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "locationId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "outOfService": {
            "description": "Quantity of the out of service equipment.",
            "type": "number"
          },
          "quantity": {
            "description": "Quantity of the equipment.",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ValidateGroupSlugPostBody": {
        "properties": {
          "locationId": {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "type": "string"
          },
          "slug": {
            "description": "Slug",
            "example": "calendar-1",
            "type": "string"
          }
        },
        "required": ["locationId", "slug"],
        "type": "object"
      },
      "ValidateGroupSlugSuccessResponseDTO": {
        "properties": {
          "available": {
            "type": "boolean"
          }
        },
        "required": ["available"],
        "type": "object"
      }
    },
    "securitySchemes": {
      "Agency-Access": {
        "bearerFormat": "JWT",
        "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
        "in": "header",
        "name": "Authorization",
        "scheme": "bearer",
        "type": "http"
      },
      "Location-Access": {
        "bearerFormat": "JWT",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "in": "header",
        "name": "Authorization",
        "scheme": "bearer",
        "type": "http"
      },
      "bearer": {
        "bearerFormat": "JWT",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "in": "header",
        "name": "Authorization",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {},
    "description": "Documentation for Calendars API",
    "title": "Calendars API",
    "version": "1.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/calendars/": {
      "get": {
        "description": "Get all calendars in a location.",
        "operationId": "get-calendars",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Group Id",
            "example": "BqTwX8QFwXzpegMve9EQ",
            "in": "query",
            "name": "groupId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Show drafted",
            "example": false,
            "in": "query",
            "name": "showDrafted",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarsGetSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Calendars",
        "tags": ["Calendars"]
      },
      "post": {
        "description": "Create calendar in a location.",
        "operationId": "create-calendar",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarCreateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarByIdSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create Calendar",
        "tags": ["Calendars"]
      }
    },
    "/calendars/appointments/{appointmentId}/notes": {
      "get": {
        "description": "Get Appointment Notes",
        "operationId": "get-appointment-notes",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Limit of notes to fetch",
            "example": 10,
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "maximum": 20,
              "type": "number"
            }
          },
          {
            "description": "Offset of notes to fetch",
            "example": 0,
            "in": "query",
            "name": "offset",
            "required": true,
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "description": "Appointment ID",
            "in": "path",
            "name": "appointmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNotesListSuccessfulResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Notes",
        "tags": ["Appointment Notes"]
      },
      "post": {
        "description": "Create Note",
        "operationId": "create-appointment-note",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Appointment ID",
            "in": "path",
            "name": "appointmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotesDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create Note",
        "tags": ["Appointment Notes"]
      }
    },
    "/calendars/appointments/{appointmentId}/notes/{noteId}": {
      "delete": {
        "description": "Delete Note",
        "operationId": "delete-appointment-note",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Appointment ID",
            "in": "path",
            "name": "appointmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteNoteSuccessfulResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete Note",
        "tags": ["Appointment Notes"]
      },
      "put": {
        "description": "Update Note",
        "operationId": "update-appointment-note",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Appointment ID",
            "in": "path",
            "name": "appointmentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotesDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update Note",
        "tags": ["Appointment Notes"]
      }
    },
    "/calendars/blocked-slots": {
      "get": {
        "description": "Get Blocked Slots",
        "operationId": "get-blocked-slots",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "0007BWpSzSwfiuSl0tR2",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User Id - Owner of an appointment. Either of userId, groupId or calendarId is required",
            "example": "CVokAlI8fgw4WYWoCtQz",
            "in": "query",
            "name": "userId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Either of calendarId, userId or groupId is required",
            "example": "BqTwX8QFwXzpegMve9EQ",
            "in": "query",
            "name": "calendarId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Either of groupId, calendarId or userId is required",
            "example": "ocQHyuzHvysMo5N5VsXc",
            "in": "query",
            "name": "groupId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start Time (in millis)",
            "example": "1680373800000",
            "in": "query",
            "name": "startTime",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End Time (in millis)",
            "in": "query",
            "name": "endTime",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCalendarEventsSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Blocked Slots",
        "tags": ["Calendar Events"]
      }
    },
    "/calendars/events": {
      "get": {
        "description": "Get Calendar Events",
        "operationId": "get-calendar-events",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "0007BWpSzSwfiuSl0tR2",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User Id - Owner of an appointment. Either of userId, groupId or calendarId is required",
            "example": "CVokAlI8fgw4WYWoCtQz",
            "in": "query",
            "name": "userId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Either of calendarId, userId or groupId is required",
            "example": "BqTwX8QFwXzpegMve9EQ",
            "in": "query",
            "name": "calendarId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Either of groupId, calendarId or userId is required",
            "example": "ocQHyuzHvysMo5N5VsXc",
            "in": "query",
            "name": "groupId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start Time (in millis)",
            "example": "1680373800000",
            "in": "query",
            "name": "startTime",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End Time (in millis)",
            "example": "1680978599999",
            "in": "query",
            "name": "endTime",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCalendarEventsSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Calendar Events",
        "tags": ["Calendar Events"]
      }
    },
    "/calendars/events/appointments": {
      "post": {
        "description": "Create appointment",
        "operationId": "create-appointment",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentCreateSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentSchemaResponse"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create Appointment",
        "tags": ["Calendar Events"]
      }
    },
    "/calendars/events/appointments/{eventId}": {
      "get": {
        "description": "Get appointment by ID",
        "operationId": "get-appointment",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Event Id or Instance id. For recurring appointments send masterEventId to modify original series.",
            "examples": {
              "example1": {
                "summary": "Event ID",
                "value": "ocQHyuzHvysMo5N5VsXc"
              },
              "example2": {
                "summary": "Recurring Instance ID",
                "value": "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"
              }
            },
            "in": "path",
            "name": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCalendarEventSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Appointment",
        "tags": ["Calendar Events"]
      },
      "put": {
        "description": "Update appointment by ID",
        "operationId": "edit-appointment",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Event Id or Instance id. For recurring appointments send masterEventId to modify original series.",
            "examples": {
              "example1": {
                "summary": "Event ID",
                "value": "ocQHyuzHvysMo5N5VsXc"
              },
              "example2": {
                "summary": "Recurring Instance ID",
                "value": "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"
              }
            },
            "in": "path",
            "name": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentEditSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentSchemaResponse"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update Appointment",
        "tags": ["Calendar Events"]
      }
    },
    "/calendars/events/block-slots": {
      "post": {
        "description": "Create block slot",
        "operationId": "create-block-slot",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSlotCreateSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBookedSlotSuccessfulResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create Block Slot",
        "tags": ["Calendars"]
      }
    },
    "/calendars/events/block-slots/{eventId}": {
      "put": {
        "description": "Update block slot by ID",
        "operationId": "edit-block-slot",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Event Id",
            "example": "ocQHyuzHvysMo5N5VsXc",
            "in": "path",
            "name": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockSlotEditSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBookedSlotSuccessfulResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update Block Slot",
        "tags": ["Calendar Events"]
      }
    },
    "/calendars/events/{eventId}": {
      "delete": {
        "description": "Delete event by ID",
        "operationId": "delete-event",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Event Id or Instance id. For recurring appointments send masterEventId to modify original series.",
            "examples": {
              "example1": {
                "summary": "Event ID",
                "value": "ocQHyuzHvysMo5N5VsXc"
              },
              "example2": {
                "summary": "Recurring Instance ID",
                "value": "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"
              }
            },
            "in": "path",
            "name": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAppointmentSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEventSuccessfulResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete Event",
        "tags": ["Calendar Events"]
      }
    },
    "/calendars/groups": {
      "get": {
        "description": "Get all calendar groups in a location.",
        "operationId": "get-groups",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllGroupsSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Groups",
        "tags": ["Calendar Groups"]
      },
      "post": {
        "description": "Create Calendar Group",
        "operationId": "create-calendar-group",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCreateSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create Calendar Group",
        "tags": ["Calendar Groups"]
      }
    },
    "/calendars/groups/validate-slug": {
      "post": {
        "description": "Validate if group slug is available or not.",
        "operationId": "validate-groups-slug",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateGroupSlugPostBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateGroupSlugSuccessResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Validate group slug",
        "tags": ["Calendar Groups"]
      }
    },
    "/calendars/groups/{groupId}": {
      "delete": {
        "description": "Delete Group",
        "operationId": "delete-group",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Group Id",
            "example": "ocQHyuzHvysMo5N5VsXc",
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete Group",
        "tags": ["Calendar Groups"]
      },
      "put": {
        "description": "Update Group by group ID",
        "operationId": "edit-group",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Group Id",
            "example": "ocQHyuzHvysMo5N5VsXc",
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCreateSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update Group",
        "tags": ["Calendar Groups"]
      }
    },
    "/calendars/groups/{groupId}/status": {
      "put": {
        "description": "Disable Group",
        "operationId": "disable-group",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Group Id",
            "example": "ocQHyuzHvysMo5N5VsXc",
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupStatusUpdateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Disable Group",
        "tags": ["Calendar Groups"]
      }
    },
    "/calendars/resources/{resourceType}": {
      "get": {
        "description": "List calendar resources by resource type and location ID",
        "operationId": "fetch-calendar-resources",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Resource Type",
            "in": "path",
            "name": "resourceType",
            "required": true,
            "schema": {
              "enum": ["equipments", "rooms"],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CalendarResourceByIdResponseDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Calendar resources listed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "List Calendar Resources",
        "tags": ["Calendar Resources: Rooms & Equipments"]
      },
      "post": {
        "description": "Create calendar resource by resource type",
        "operationId": "create-calendar-resource",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Resource Type",
            "in": "path",
            "name": "resourceType",
            "required": true,
            "schema": {
              "enum": ["equipments", "rooms"],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalendarResourceDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResourceByIdResponseDTO"
                }
              }
            },
            "description": "Calendar resource created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Create Calendar Resource",
        "tags": ["Calendar Resources: Rooms & Equipments"]
      }
    },
    "/calendars/resources/{resourceType}/{id}": {
      "delete": {
        "description": "Delete calendar resource by ID",
        "operationId": "delete-calendar-resource",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Resource Type",
            "in": "path",
            "name": "resourceType",
            "required": true,
            "schema": {
              "enum": ["equipments", "rooms"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Resource ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDeleteResponseDTO"
                }
              }
            },
            "description": "Calendar resource deleted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Delete Calendar Resource",
        "tags": ["Calendar Resources: Rooms & Equipments"]
      },
      "get": {
        "description": "Get calendar resource by ID",
        "operationId": "get-calendar-resource",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Resource Type",
            "in": "path",
            "name": "resourceType",
            "required": true,
            "schema": {
              "enum": ["equipments", "rooms"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Resource ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResourceByIdResponseDTO"
                }
              }
            },
            "description": "Calendar resource fetched"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Get Calendar Resource",
        "tags": ["Calendar Resources: Rooms & Equipments"]
      },
      "put": {
        "description": "Update calendar resource by ID",
        "operationId": "update-calendar-resource",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Resource Type",
            "in": "path",
            "name": "resourceType",
            "required": true,
            "schema": {
              "enum": ["equipments", "rooms"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Resource ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarResourceDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResourceResponseDTO"
                }
              }
            },
            "description": "Calendar resource updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Location-Access": []
          }
        ],
        "summary": "Update Calendar Resource",
        "tags": ["Calendar Resources: Rooms & Equipments"]
      }
    },
    "/calendars/{calendarId}": {
      "delete": {
        "description": "Delete calendar by ID",
        "operationId": "delete-calendar",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Id",
            "example": "ocQHyuzHvysMo5N5VsXc",
            "in": "path",
            "name": "calendarId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDeleteSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete Calendar",
        "tags": ["Calendars"]
      },
      "get": {
        "description": "Get calendar by ID",
        "operationId": "get-calendar",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Id",
            "example": "ocQHyuzHvysMo5N5VsXc",
            "in": "path",
            "name": "calendarId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarByIdSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Calendar",
        "tags": ["Calendars"]
      },
      "put": {
        "description": "Update calendar by ID.",
        "operationId": "update-calendar",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Id",
            "example": "ocQHyuzHvysMo5N5VsXc",
            "in": "path",
            "name": "calendarId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarUpdateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarByIdSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update Calendar",
        "tags": ["Calendars"]
      }
    },
    "/calendars/{calendarId}/free-slots": {
      "get": {
        "description": "Get free slots for a calendar between a date range. Optionally a consumer can also request free slots in a particular timezone and also for a particular user.",
        "operationId": "get-slots",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "description": "Calendar Id",
            "example": "ocQHyuzHvysMo5N5VsXc",
            "in": "path",
            "name": "calendarId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start Date (**⚠️ Important:** Date range cannot be more than 31 days)",
            "example": 1548898600000,
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "End Date (**⚠️ Important:** Date range cannot be more than 31 days)",
            "example": 1601490599999,
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "The timezone in which the free slots are returned",
            "example": "America/Chihuahua",
            "in": "query",
            "name": "timezone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user for whom the free slots are returned",
            "example": "082goXVW3lIExEQPOnd3",
            "in": "query",
            "name": "userId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The users for whom the free slots are returned",
            "example": "[082goXVW3lIExEQPOnd3]",
            "in": "query",
            "name": "userIds",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Apply Look Busy",
            "example": false,
            "in": "query",
            "name": "enableLookBusy",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSlotsSuccessfulResponseDto"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Free Slots",
        "tags": ["Calendars"]
      }
    },
    "/calendars/{calendarId}/notifications": {
      "get": {
        "description": "Get calendar notifications based on query",
        "operationId": "get-event-notification",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "calendarId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Specifies the model associated with the notification. This can be extended to support additional models in the future. For now only Calendars is supported",
            "in": "query",
            "name": "altType",
            "required": false,
            "schema": {
              "default": "calendar",
              "enum": ["calendar"],
              "type": "string"
            }
          },
          {
            "description": "Specifies the ID of the model associated with the notification. This can be extended to support additional models in the future.",
            "in": "query",
            "name": "altId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "isActive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "deleted",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Number of records to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "type": "number"
            }
          },
          {
            "description": "Number of records to skip",
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CalendarNotificationResponseDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "summary": "Get notifications",
        "tags": ["Calendar Notifications"]
      },
      "post": {
        "description": "Create Calendar notifications, either one or multiple. All notification settings must be for single calendar only",
        "operationId": "create-event-notification",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "calendarId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CreateCalendarNotificationDTO"
                },
                "type": "array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CalendarNotificationResponseDTO"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "summary": "Create notification",
        "tags": ["Calendar Notifications"]
      }
    },
    "/calendars/{calendarId}/notifications/{notificationId}": {
      "delete": {
        "description": "Delete notification",
        "operationId": "delete-event-notification",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "calendarId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "notificationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarNotificationDeleteResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "summary": "",
        "tags": ["Calendar Notifications"]
      },
      "get": {
        "description": "Find Event notification by notificationId",
        "operationId": "find-event-notification",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "calendarId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "notificationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarNotificationResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "summary": "Get notification",
        "tags": ["Calendar Notifications"]
      },
      "put": {
        "description": "Update Event notification by id",
        "operationId": "update-event-notification",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-04-15"],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "calendarId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "notificationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalendarNotificationsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarNotificationDeleteResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "summary": "Update notification",
        "tags": ["Calendar Notifications"]
      }
    }
  },
  "servers": [
    {
      "url": "https://services.leadconnectorhq.com"
    }
  ],
  "tags": [
    {
      "description": "Documentation for Calendars API",
      "name": "Calendars"
    }
  ]
}
